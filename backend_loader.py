import json
import os
import glob
from search_core.basic_searcher import BasicSearcher
from search_core.master_searcher import MasterSearcher
from sentence_transformers import SentenceTransformer
from search_core.transcript_searcher import TranscriptSearcher

from config import (
    VIDEO_BASE_PATHS, 
    FAISS_INDEX_PATH, 
    RERANK_METADATA_PATH, 
    CLIP_FEATURES_PATH, 
    ALL_ENTITIES_PATH, 
    OPENAI_API_KEY, 
    GEMINI_API_KEY
)


def initialize_backend():
    """
    Kh·ªüi t·∫°o v√† tr·∫£ v·ªÅ m·ªôt dictionary ch·ª©a T·∫§T C·∫¢ c√°c instance backend c·∫ßn thi·∫øt.
    PHI√äN B·∫¢N H·ªñ TR·ª¢ ƒêA BATCH.
    """
    print("--- üöÄ Giai ƒëo·∫°n 2/4: ƒêang c·∫•u h√¨nh v√† kh·ªüi t·∫°o Backend (Ch·∫ø ƒë·ªô ƒêa Batch)... ---")
    
    
    print("--- 1/3: Qu√©t v√† l·∫≠p b·∫£n ƒë·ªì ƒë∆∞·ªùng d·∫´n video (H·ªó tr·ª£ ƒëa Batch)... ---")
    all_video_files = []
    for path in VIDEO_BASE_PATHS:
        if os.path.isdir(path):
            print(f"   -> ƒêang qu√©t th∆∞ m·ª•c video: {path}")
            all_video_files.extend(glob.glob(os.path.join(path, "**", "*.mp4"), recursive=True))
        else:
            print(f"   -> ‚ö†Ô∏è C·∫£nh b√°o: Th∆∞ m·ª•c video '{path}' trong config kh√¥ng t·ªìn t·∫°i. B·ªè qua.")
            
    video_path_map = {os.path.basename(f).replace('.mp4', ''): f for f in all_video_files}
    print(f"--- ‚úÖ L·∫≠p b·∫£n ƒë·ªì th√†nh c√¥ng cho {len(video_path_map)} video t·ª´ c·∫£ hai batch. ---")
    
    print("   -> ƒêang t·∫£i m√¥ h√¨nh Bi-Encoder ti·∫øng Vi·ªát cho Reranking...")
    try:
        rerank_model = SentenceTransformer('bkai-foundation-models/vietnamese-bi-encoder', device='cuda')
        print("--- ‚úÖ T·∫£i model Bi-Encoder th√†nh c√¥ng! ---")
    except Exception as e:
        print(f"--- ‚ùå L·ªói nghi√™m tr·ªçng khi t·∫£i model Rerank: {e}. H·ªá th·ªëng c√≥ th·ªÉ kh√¥ng ho·∫°t ƒë·ªông ƒë√∫ng. ---")
        rerank_model = None
    
    basic_searcher = BasicSearcher(
        faiss_index_path=FAISS_INDEX_PATH, 
        metadata_path=RERANK_METADATA_PATH
    )
    master_searcher = MasterSearcher(
        basic_searcher=basic_searcher, 
        rerank_model=rerank_model, 
        openai_api_key=OPENAI_API_KEY, 
        gemini_api_key=GEMINI_API_KEY, 
        entities_path=ALL_ENTITIES_PATH, 
        clip_features_path=CLIP_FEATURES_PATH, 
        video_path_map=video_path_map
    )    
    print("--- ‚úÖ MasterSearcher ƒë√£ s·∫µn s√†ng. ---")

    print("--- 2/3: Kh·ªüi t·∫°o TranscriptSearcher (Tai Th√≠nh)... ---")
    METADATA_V6_COMBINED_PATH = RERANK_METADATA_PATH 
    if not os.path.exists(METADATA_V6_COMBINED_PATH):
         print(f"--- ‚ö†Ô∏è C·∫¢NH B√ÅO: Kh√¥ng t√¨m th·∫•y file metadata h·ª£p nh·∫•t t·∫°i {METADATA_V6_COMBINED_PATH}. TranscriptSearcher s·∫Ω kh√¥ng ho·∫°t ƒë·ªông. ---")
         transcript_searcher = None
    else:
        transcript_searcher = TranscriptSearcher(metadata_path=METADATA_V6_COMBINED_PATH)
    print("--- ‚úÖ TranscriptSearcher ƒë√£ s·∫µn s√†ng. ---")
    
    print("--- 3/3: T·∫£i B·∫£n ƒë·ªì FPS ƒë√£ H·ª£p nh·∫•t... ---")
    fps_map = {}
    
    fps_map_path = "/kaggle/input/stage1/video_fps_map_combined.json" 
    
    if os.path.exists(fps_map_path):
        try:
            with open(fps_map_path, 'r') as f:
                fps_map = json.load(f)
            print(f"--- ‚úÖ T·∫£i th√†nh c√¥ng b·∫£n ƒë·ªì FPS h·ª£p nh·∫•t cho {len(fps_map)} video. ---")
        except Exception as e:
            print(f"--- ‚ùå L·ªói khi t·∫£i FPS map h·ª£p nh·∫•t: {e}. S·∫Ω s·ª≠ d·ª•ng FPS m·∫∑c ƒë·ªãnh. ---")
    else:
        print(f"--- ‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y file FPS map h·ª£p nh·∫•t t·∫°i {fps_map_path}. S·∫Ω s·ª≠ d·ª•ng FPS m·∫∑c ƒë·ªãnh. ---")

    print("\n--- ‚úÖ Backend ƒë√£ kh·ªüi t·∫°o th√†nh c√¥ng! H·∫°m ƒë·ªôi s·∫µn s√†ng chi·∫øn ƒë·∫•u tr√™n m·ªçi m·∫∑t tr·∫≠n. ---")
    
    return {
        "master_searcher": master_searcher,
        "transcript_searcher": transcript_searcher,
        "fps_map": fps_map,
        "video_path_map": video_path_map 
    }