import gradio as gr
from functools import partial
import pandas as pd

# --- Local imports ---
from backend_loader import initialize_backend
from ui_layout import build_ui
import event_handlers as handlers

print("--- üöÄ B·∫Øt ƒë·∫ßu kh·ªüi ch·∫°y AIC25 Search Fleet ---")

# --- Giai ƒëo·∫°n 1 & 2: Kh·ªüi t·∫°o Backend v√† c√°c ƒê·ªông c∆° ---
print("--- Giai ƒëo·∫°n 1/4 & 2/4: ƒêang t·∫£i th∆∞ vi·ªán v√† kh·ªüi t·∫°o Backend... ---")
backend_objects = initialize_backend()

# --- Giai ƒëo·∫°n 3: X√¢y d·ª±ng Giao di·ªán & K·∫øt n·ªëi Logic ---
print("--- Giai ƒëo·∫°n 3/4: ƒêang x√¢y d·ª±ng giao di·ªán v√† k·∫øt n·ªëi s·ª± ki·ªán... ---")

# --- S·ª¨ D·ª§NG `partial` ƒê·ªÇ "TI√äM" BACKEND V√ÄO C√ÅC H√ÄM X·ª¨ L√ù S·ª∞ KI·ªÜN ƒê∆†N GI·∫¢N ---
search_with_backend = partial(handlers.perform_search, master_searcher=backend_objects['master_searcher'])
transcript_search_with_backend = partial(handlers.handle_transcript_search, transcript_searcher=backend_objects['transcript_searcher'])
calculate_frame_with_backend = partial(handlers.calculate_frame_number, fps_map=backend_objects['fps_map'])
add_transcript_to_submission_with_backend = partial(handlers.add_transcript_result_to_submission)

def connect_event_listeners(ui_components):
    """
    K·∫øt n·ªëi T·∫§T C·∫¢ c√°c s·ª± ki·ªán c·ªßa component UI v·ªõi c√°c h√†m x·ª≠ l√Ω t∆∞∆°ng ·ª©ng.
    PHI√äN B·∫¢N CU·ªêI C√ôNG: √Åp d·ª•ng Event Chaining v√† Wrapper functions.
    """
    ui = ui_components
    
    # --- ƒê·ªãnh nghƒ©a c√°c b·ªô outputs v√† states d√πng chung ---
    full_video_path_state = gr.State()
    
    unified_analysis_outputs = [
        ui["video_player"], ui["selected_image_display"], ui["full_transcript_display"],
        ui["analysis_display_html"], ui["selected_candidate_for_submission"],
        ui["frame_calculator_video_id"], ui["frame_calculator_time_input"],
        full_video_path_state
    ]
    
    # ==============================================================================
    # === 1. S·ª∞ KI·ªÜN TAB "M·∫ÆT TH·∫¶N" (VISUAL SCOUT) ===
    # ==============================================================================
    
    visual_search_inputs = [
        ui["query_input"], ui["num_results"], ui["w_clip_slider"], 
        ui["w_obj_slider"], ui["w_semantic_slider"], ui["lambda_mmr_slider"]
    ]
    visual_search_main_outputs = [
        ui["results_gallery"], ui["status_output"], ui["response_state"],
        ui["page_info_display"], ui["gallery_items_state"], ui["current_page_state"]
    ]

    # S·ª≠ d·ª•ng .then() ƒë·ªÉ n·ªëi chu·ªói s·ª± ki·ªán: D·ªçn d·∫πp tr∆∞·ªõc, t√¨m ki·∫øm sau.
    search_event = ui["search_button"].click(
        fn=handlers.clear_analysis_panel,
        outputs=unified_analysis_outputs
    ).then(
        fn=search_with_backend,
        inputs=visual_search_inputs,
        outputs=visual_search_main_outputs
    )

    # N√∫t Enter trong textbox c≈©ng k√≠ch ho·∫°t chu·ªói s·ª± ki·ªán t∆∞∆°ng t·ª±
    ui["query_input"].submit(
        fn=handlers.clear_analysis_panel,
        outputs=unified_analysis_outputs
    ).then(
        fn=search_with_backend,
        inputs=visual_search_inputs,
        outputs=visual_search_main_outputs
    )

    page_outputs = [ui["results_gallery"], ui["current_page_state"], ui["page_info_display"]]
    ui["prev_page_button"].click(fn=handlers.update_gallery_page, inputs=[ui["gallery_items_state"], ui["current_page_state"], gr.Textbox("‚óÄÔ∏è Trang tr∆∞·ªõc", visible=False)], outputs=page_outputs)
    ui["next_page_button"].click(fn=handlers.update_gallery_page, inputs=[ui["gallery_items_state"], ui["current_page_state"], gr.Textbox("‚ñ∂Ô∏è Trang sau", visible=False)], outputs=page_outputs)
    
    gallery_select_outputs = unified_analysis_outputs + [
        ui["selected_candidate_for_submission"],
        ui["frame_calculator_video_id"],
        ui["frame_calculator_time_input"],
        full_video_path_state
    ]
    ui["results_gallery"].select(
        fn=handlers.on_gallery_select,
        inputs=[ui["response_state"], ui["current_page_state"]], 
        outputs=unified_analysis_outputs # Danh s√°ch n√†y ƒë√£ kh·ªõp
    )

    # ==============================================================================
    # === 2. S·ª∞ KI·ªÜN TAB "TAI TH√çNH" (TRANSCRIPT INTEL) ===
    # ==============================================================================

    transcript_inputs = [ui["transcript_query_1"], ui["transcript_query_2"], ui["transcript_query_3"]]
    transcript_search_main_outputs = [
        ui["transcript_results_count"], ui["transcript_results_df"],
        ui["transcript_results_state"]
    ]
    ui["transcript_search_button"].click(
        fn=handlers.clear_analysis_panel,
        outputs=unified_analysis_outputs
    ).then(
        fn=transcript_search_with_backend,
        inputs=transcript_inputs,
        outputs=transcript_search_main_outputs
    )
    
    transcript_clear_main_outputs = [
        ui["transcript_query_1"], ui["transcript_query_2"], ui["transcript_query_3"],
        ui["transcript_results_count"], ui["transcript_results_df"], ui["transcript_results_state"]
    ]
    # T·ªïng c·ªông: 6 outputs ch√≠nh + 8 outputs d·ªçn d·∫πp = 14 outputs
    transcript_clear_outputs = transcript_clear_main_outputs + unified_analysis_outputs
    
    ui["transcript_clear_button"].click(
        fn=handlers.clear_transcript_search, 
        outputs=transcript_clear_outputs
    )
    
    # S·ª≠ d·ª•ng h√†m wrapper ƒë·ªÉ x·ª≠ l√Ω s·ª± ki·ªán select m·ªôt c√°ch an to√†n
    def on_transcript_select_wrapper(state, evt):
        if not isinstance(evt, gr.SelectData): # Ki·ªÉm tra an to√†n
            return None, None, "L·ªói: S·ª± ki·ªán kh√¥ng h·ª£p l·ªá.", "", None, "", "0.0", None, None
        return handlers.on_transcript_select(state, evt, backend_objects['video_path_map'])
    
    transcript_select_inputs = [
        ui["transcript_results_state"],
        ui["video_path_map_state"], # <-- Th√™m state l√†m input
        ui["transcript_results_df"]  # <-- Th√™m component ngu·ªìn ƒë·ªÉ Gradio truy·ªÅn evt
    ]
        
    transcript_select_outputs = unified_analysis_outputs + [ui["transcript_selected_index_state"]]
    
    # K·∫øt n·ªëi tr·ª±c ti·∫øp, kh√¥ng c·∫ßn wrapper
    ui["transcript_results_df"].select(
        fn=handlers.on_transcript_select,
        inputs=transcript_select_inputs,
        outputs=transcript_select_outputs
    )

    # ==============================================================================
    # === 3. S·ª∞ KI·ªÜN D√ôNG CHUNG (C·ªòT PH·∫¢I) ===
    # ==============================================================================

    ui["view_full_video_button"].click(
        fn=handlers.get_full_video_path_for_button, 
        inputs=[full_video_path_state], 
        outputs=[ui["submission_file_output"]]
    )
    
    add_outputs = [ui["submission_list_state"], ui["submission_text_editor"]]
    
    # Th√™m t·ª´ Visual
    add_visual_inputs = [ui["submission_list_state"], ui["selected_candidate_for_submission"], ui["response_state"]]
    ui["add_top_button"].click(fn=partial(handlers.add_to_submission_list, position="top"), inputs=add_visual_inputs, outputs=add_outputs)
    ui["add_bottom_button"].click(fn=partial(handlers.add_to_submission_list, position="bottom"), inputs=add_visual_inputs, outputs=add_outputs)
    
    # Th√™m t·ª´ Transcript
    transcript_add_inputs = [ui["submission_list_state"], ui["transcript_results_state"], ui["transcript_selected_index_state"]]
    ui["add_transcript_top_button"].click(fn=partial(handlers.add_transcript_result_to_submission, position="top"), inputs=transcript_add_inputs, outputs=add_outputs)
    ui["add_transcript_bottom_button"].click(fn=partial(handlers.add_transcript_result_to_submission, position="bottom"), inputs=transcript_add_inputs, outputs=add_outputs)

    # B·∫£ng ƒëi·ªÅu khi·ªÉn N·ªôp b√†i
    ui["refresh_submission_button"].click(fn=handlers.prepare_submission_for_edit, inputs=[ui["submission_list_state"]], outputs=[ui["submission_text_editor"]])
    ui["clear_submission_button"].click(fn=handlers.clear_submission_state_and_editor, inputs=None, outputs=[ui["submission_list_state"], ui["submission_text_editor"]])
    
    # M√°y t√≠nh Th·ªùi gian & Frame
    ui["frame_calculator_button"].click(fn=calculate_frame_with_backend, inputs=[ui["frame_calculator_video_id"], ui["frame_calculator_time_input"]], outputs=[ui["frame_calculator_output"]])
    
    # Xu·∫•t File N·ªôp b√†i
    ui["submission_button"].click(fn=handlers.handle_submission, inputs=[ui["submission_text_editor"], ui["query_id_input"]], outputs=[ui["submission_file_output"]])
    
    # N√∫t X√≥a T·∫•t c·∫£
    clear_all_outputs = [
        # M·∫Øt Th·∫ßn
        ui["results_gallery"], ui["status_output"], ui["response_state"],
        ui["page_info_display"], ui["gallery_items_state"], ui["current_page_state"],
        # Tai Th√≠nh
        ui["transcript_query_1"], ui["transcript_query_2"], ui["transcript_query_3"],
        ui["transcript_results_count"], ui["transcript_results_df"], ui["transcript_results_state"],
        # Tr·∫°m Ph√¢n t√≠ch
        *unified_analysis_outputs,
        # B·∫£ng ƒëi·ªÅu khi·ªÉn
        ui["submission_text_editor"], ui["submission_list_state"],
        # Xu·∫•t File
        ui["query_id_input"], ui["submission_file_output"]
    ]
    ui["clear_button"].click(fn=handlers.clear_all, inputs=None, outputs=clear_all_outputs, queue=False)
    
# === X√¢y d·ª±ng UI v√† truy·ªÅn h√†m k·∫øt n·ªëi s·ª± ki·ªán v√†o ===
app = build_ui(connect_event_listeners)

@app.load
def load_backend_data_into_state(ui_components):
    """
    S·ª± ki·ªán n√†y ch·∫°y m·ªôt l·∫ßn duy nh·∫•t khi ·ª©ng d·ª•ng t·∫£i xong.
    ƒê√¢y l√† n∆°i l√Ω t∆∞·ªüng ƒë·ªÉ ƒëi·ªÅn d·ªØ li·ªáu v√†o State.
    """
    print("--- ƒêang t·∫£i d·ªØ li·ªáu backend v√†o Gradio State... ---")
    return {
        ui_components["video_path_map_state"]: backend_objects['video_path_map']
    }

# --- Giai ƒëo·∫°n 4: Kh·ªüi ch·∫°y App Server ---
if __name__ == "__main__":
    print("--- ‚úÖ H·∫°m ƒë·ªôi ƒë√£ ƒë∆∞·ª£c t√≠ch h·ª£p ho√†n ch·ªânh! Kh·ªüi ch·∫°y Gradio App Server... ---")
    app.launch(share=True, allowed_paths=["/kaggle/input/", "/kaggle/working/"], debug=True)