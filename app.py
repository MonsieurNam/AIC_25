import gradio as gr
from functools import partial
import pandas as pd # C·∫ßn cho vi·ªác reset DataFrame

# Local imports
from backend_loader import initialize_backend
from ui_layout import build_ui
import event_handlers as handlers

# ==============================================================================
# === B·∫ÆT ƒê·∫¶U T√çCH H·ª¢P GIAI ƒêO·∫†N 4 ===
# ==============================================================================

print("--- üöÄ B·∫Øt ƒë·∫ßu kh·ªüi ch·∫°y AIC25 Search Fleet ---")

# --- Giai ƒëo·∫°n 1 & 2: Kh·ªüi t·∫°o Backend v√† c√°c ƒê·ªông c∆° ---
print("--- Giai ƒëo·∫°n 1/4 & 2/4: ƒêang t·∫£i th∆∞ vi·ªán v√† kh·ªüi t·∫°o Backend... ---")
backend_objects = initialize_backend()

# --- Giai ƒëo·∫°n 3: X√¢y d·ª±ng Giao di·ªán & K·∫øt n·ªëi Logic ---
print("--- Giai ƒëo·∫°n 3/4: ƒêang x√¢y d·ª±ng giao di·ªán v√† k·∫øt n·ªëi s·ª± ki·ªán... ---")

# --- S·ª¨ D·ª§NG `partial` ƒê·ªÇ CHU·∫®N B·ªä C√ÅC H√ÄM HANDLER ---
# K·ªπ thu·∫≠t n√†y "g√≥i" c√°c ƒë·ªëi t∆∞·ª£ng backend v√†o h√†m, s·∫µn s√†ng ƒë·ªÉ ƒë∆∞·ª£c g·ªçi b·ªüi UI
search_with_backend = partial(handlers.perform_search, master_searcher=backend_objects['master_searcher'])
transcript_search_with_backend = partial(handlers.handle_transcript_search, transcript_searcher=backend_objects['transcript_searcher'])
calculate_frame_with_backend = partial(handlers.calculate_frame_number, fps_map=backend_objects['fps_map'])

def connect_event_listeners(ui_components):
    """
    K·∫øt n·ªëi T·∫§T C·∫¢ c√°c s·ª± ki·ªán c·ªßa component UI v·ªõi c√°c h√†m x·ª≠ l√Ω t∆∞∆°ng ·ª©ng.
    PHI√äN B·∫¢N V2: H·ªó tr·ª£ H·∫°m ƒë·ªôi Hai G·ªçng K√¨m.
    """
    ui = ui_components # ƒê·ªïi t√™n cho ng·∫Øn g·ªçn
    
    # === 1. S·ª∞ KI·ªÜN TAB "M·∫ÆT TH·∫¶N" (VISUAL SCOUT) ===
    # 1.1. N√∫t T√¨m ki·∫øm ch√≠nh
    visual_search_inputs = [ui["query_input"], ui["num_results"], ui["w_clip_slider"], ui["w_obj_slider"], ui["w_semantic_slider"], ui["lambda_mmr_slider"]]
    visual_search_outputs = [ui["results_gallery"], ui["status_output"], ui["response_state"], ui["page_info_display"], ui["gallery_items_state"], ui["current_page_state"], ui["page_info_display"]]
    ui["search_button"].click(fn=search_with_backend, inputs=visual_search_inputs, outputs=visual_search_outputs)
    ui["query_input"].submit(fn=search_with_backend, inputs=visual_search_inputs, outputs=visual_search_outputs)
    
    # 1.2. Ph√¢n trang
    page_outputs = [ui["results_gallery"], ui["current_page_state"], ui["page_info_display"]]
    ui["prev_page_button"].click(fn=handlers.update_gallery_page, inputs=[ui["gallery_items_state"], ui["current_page_state"], gr.Textbox("‚óÄÔ∏è Trang tr∆∞·ªõc", visible=False)], outputs=page_outputs)
    ui["next_page_button"].click(fn=handlers.update_gallery_page, inputs=[ui["gallery_items_state"], ui["current_page_state"], gr.Textbox("‚ñ∂Ô∏è Trang sau", visible=False)], outputs=page_outputs)

    # 1.3. Ch·ªçn m·ªôt ·∫£nh trong Gallery -> K√≠ch ho·∫°t Tr·∫°m Ph√¢n t√≠ch
    # State ·∫©n m·ªõi ƒë·ªÉ l∆∞u full_video_path
    full_video_path_state = gr.State()
    analysis_outputs = [ui["selected_image_display"], ui["video_player"], ui["selected_candidate_for_submission"], ui["frame_calculator_video_id"], ui["frame_calculator_timestamp"], full_video_path_state]
    ui["results_gallery"].select(fn=handlers.on_gallery_select, inputs=[ui["response_state"], ui["current_page_state"]], outputs=analysis_outputs)
    
    # 1.4. N√∫t M·ªü Video G·ªëc
    ui["view_full_video_button"].click(fn=handlers.get_full_video_path_for_button, inputs=[full_video_path_state], outputs=[ui["submission_file_output"]])


    # === 2. S·ª∞ KI·ªÜN TAB "TAI TH√çNH" (TRANSCRIPT INTEL) ===
    # 2.1. N√∫t T√¨m ki·∫øm Transcript
    transcript_inputs = [ui["transcript_query_1"], ui["transcript_query_2"], ui["transcript_query_3"]]
    transcript_outputs = [ui["transcript_results_count"], ui["transcript_results_df"], ui["transcript_results_state"]]
    ui["transcript_search_button"].click(fn=transcript_search_with_backend, inputs=transcript_inputs, outputs=transcript_outputs)
    
    # 2.2. N√∫t X√≥a b·ªô l·ªçc Transcript
    transcript_clear_outputs = [ui["transcript_query_1"], ui["transcript_query_2"], ui["transcript_query_3"], ui["transcript_results_count"], ui["transcript_results_df"], ui["transcript_results_state"]]
    ui["transcript_clear_button"].click(fn=handlers.clear_transcript_search, inputs=None, outputs=transcript_clear_outputs)

    # 2.3. Ch·ªçn m·ªôt d√≤ng k·∫øt qu·∫£ -> Ph√°t video
    ui["transcript_results_df"].select(fn=handlers.on_transcript_select, inputs=[ui["transcript_results_state"]], outputs=[ui["transcript_video_player"]])

    # === 3. S·ª∞ KI·ªÜN D√ôNG CHUNG (C·ªòT PH·∫¢I) ===
    # 3.1. V√πng N·ªôp b√†i
    submission_list_outputs = [ui["submission_list_display"], ui["submission_list_state"], ui["submission_list_selector"]]
    add_inputs = [ui["submission_list_state"], ui["selected_candidate_for_submission"], ui["response_state"]]
    ui["add_top_button"].click(fn=handlers.add_to_submission_list, inputs=add_inputs + [gr.Textbox("top", visible=False)], outputs=submission_list_outputs)
    ui["add_bottom_button"].click(fn=handlers.add_to_submission_list, inputs=add_inputs + [gr.Textbox("bottom", visible=False)], outputs=submission_list_outputs)
    ui["clear_submission_button"].click(fn=handlers.clear_submission_list, inputs=[], outputs=submission_list_outputs)
    # ... (c√°c n√∫t move/remove gi·ªØ nguy√™n)

    # 3.2. C√¥ng c·ª• T√≠nh to√°n Frame
    calc_inputs = [ui["frame_calculator_video_id"], ui["frame_calculator_timestamp"]]
    ui["frame_calculator_button"].click(fn=calculate_frame_with_backend, inputs=calc_inputs, outputs=[ui["frame_calculator_output"]])

    # 3.3. N√∫t Xu·∫•t File CSV
    ui["submission_button"].click(fn=handlers.handle_submission, inputs=[ui["submission_list_state"], ui["query_id_input"]], outputs=[ui["submission_file_output"]])

    # 3.4. N√∫t X√≥a T·∫•t c·∫£ (To√†n b·ªô h·ªá th·ªëng)
    clear_all_outputs = [
        # Tab M·∫Øt Th·∫ßn
        ui["results_gallery"], ui["status_output"], ui["response_state"], "", ui["gallery_items_state"], ui["current_page_state"], ui["page_info_display"],
        # Tab Tai Th√≠nh
        ui["transcript_query_1"], ui["transcript_query_2"], ui["transcript_query_3"], ui["transcript_results_count"], ui["transcript_results_df"], ui["transcript_video_player"], ui["transcript_results_state"],
        # Tr·∫°m Ph√¢n t√≠ch
        ui["selected_image_display"], ui["video_player"], ui["selected_candidate_for_submission"],
        # C√¥ng c·ª• t√≠nh to√°n
        ui["frame_calculator_video_id"], ui["frame_calculator_timestamp"], ui["frame_calculator_output"],
        # V√πng N·ªôp b√†i
        ui["submission_list_display"], ui["submission_list_state"], ui["submission_list_selector"], ui["query_id_input"], ui["submission_file_output"]
    ]
    ui["clear_button"].click(fn=handlers.clear_all, inputs=None, outputs=clear_all_outputs, queue=False)

# === X√¢y d·ª±ng UI v√† truy·ªÅn h√†m k·∫øt n·ªëi s·ª± ki·ªán v√†o ===
app = build_ui(connect_event_listeners)

# --- Giai ƒëo·∫°n 4: Kh·ªüi ch·∫°y App Server ---
if __name__ == "__main__":
    print("--- üöÄ Kh·ªüi ch·∫°y Gradio App Server (H·∫°m ƒë·ªôi G·ªçng K√¨m K√©p) ---")
    app.launch(share=True, allowed_paths=["/kaggle/input/", "/kaggle/working/"], debug=True)

# ==============================================================================
# === K·∫æT TH√öC T√çCH H·ª¢P GIAI ƒêO·∫†N 4 ===
# ==============================================================================