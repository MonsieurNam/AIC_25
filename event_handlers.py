# ==============================================================================
# === EVENT HANDLERS - PHI√äN B·∫¢N ƒê√É D·ªåN D·∫∏P V√Ä H·ª¢P NH·∫§T ===
# ==============================================================================
from io import StringIO
import shutil
import gradio as gr
import pandas as pd
import numpy as np
import time
import os
import re
import traceback
from typing import Dict, Any, List, Optional

# Local imports
from config import ITEMS_PER_PAGE, MAX_SUBMISSION_RESULTS
from ui_helpers import create_detailed_info_html
from search_core.task_analyzer import TaskType
from utils import create_video_segment, generate_submission_file
from utils.formatting import format_submission_list_to_csv_string

# ==============================================================================
# === C√ÅC H√ÄM TR·ª¢ GI√öP ===
# ==============================================================================

def generate_full_video_link(video_path: str) -> str:
    # === DEBUG LOG: KI·ªÇM TRA PATH CU·ªêI C√ôNG TR∆Ø·ªöC KHI T·∫†O URL ===
    print("\n" + "="*20 + " DEBUG LOG: generate_full_video_link " + "="*20)
    print(f"-> Input video_path: '{video_path}' (Type: {type(video_path)})")
    # === K·∫æT TH√öC DEBUG LOG ===
    
    if not video_path or not os.path.exists(video_path):
        # === DEBUG LOG: PATH KH√îNG H·ª¢P L·ªÜ HO·∫∂C KH√îNG T·ªíN T·∫†I ===
        print(f"-> VALIDATION FAILED: Path is None, empty, or does not exist.")
        print("="*73 + "\n")
        # === K·∫æT TH√öC DEBUG LOG ===
        return "<p style='color: #888; text-align: center; padding: 10px;'>Ch·ªçn m·ªôt k·∫øt qu·∫£ ƒë·ªÉ xem link video g·ªëc.</p>"
    
    file_url = f"/file={video_path}"
    
    # === DEBUG LOG: KI·ªÇM TRA URL ƒê∆Ø·ª¢C T·∫†O RA ===
    print(f"-> Generated file_url: '{file_url}'")
    print(f"-> Path exists: {os.path.exists(video_path)}")
    print("="*73 + "\n")
    # === K·∫æT TH√öC DEBUG LOG ===
    
    return f"""<div style='text-align: center; margin-top: 10px;'><a href='{file_url}' target='_blank' style='background-color: #4CAF50; color: white; padding: 10px 15px; text-align: center; text-decoration: none; display: inline-block; border-radius: 8px; font-weight: bold; cursor: pointer;'>üé¨ M·ªü Video G·ªëc (To√†n b·ªô) trong Tab m·ªõi</a></div>"""

def get_full_transcript_for_video(video_id: str, transcript_searcher) -> str:
    if not transcript_searcher or transcript_searcher.full_data is None: return "L·ªói: Transcript engine ch∆∞a s·∫µn s√†ng."
    try:
        video_transcripts = transcript_searcher.full_data[transcript_searcher.full_data['video_id'] == video_id]
        full_text = " ".join(video_transcripts['transcript_text'].tolist())
        return full_text if full_text.strip() else "Video n√†y kh√¥ng c√≥ l·ªùi tho·∫°i."
    except Exception: return "Kh√¥ng th·ªÉ t·∫£i transcript cho video n√†y."

def clear_analysis_panel():
    """Helper ƒë·ªÉ x√≥a c√°c component trong c·ªôt ph·∫£i."""
    return None, None, "", "", "", None, "", "", None

# ==============================================================================
# === HANDLERS CH√çNH CHO C√ÅC TAB T√åM KI·∫æM ===
# ==============================================================================

def perform_search(query_text: str, num_results: int, w_clip: float, w_obj: float, w_semantic: float, lambda_mmr: float, master_searcher):
    if not query_text.strip():
        gr.Warning("Vui l√≤ng nh·∫≠p truy v·∫•n t√¨m ki·∫øm!")
        return [], "<div style='color: orange;'>‚ö†Ô∏è Vui l√≤ng nh·∫≠p truy v·∫•n.</div>", None, [], 1, "Trang 1 / 1"
    
    gr.Info("B·∫Øt ƒë·∫ßu qu√©t visual...")
    try:
        config = {"top_k_final": int(num_results), "w_clip": w_clip, "w_obj": w_obj, "w_semantic": w_semantic, "lambda_mmr": lambda_mmr}
        start_time = time.time()
        full_response = master_searcher.search(query=query_text, config=config)
        search_time = time.time() - start_time
    except Exception as e:
        traceback.print_exc()
        return [], f"<div style='color: red;'>üî• L·ªói backend: {e}</div>", None, [], 1, "Trang 1 / 1"
    
    gallery_paths = format_results_for_mute_gallery(full_response)
    num_found = len(gallery_paths)
    task_type_msg = full_response.get('task_type', TaskType.KIS).value
    status_msg = f"<div style='color: {'#166534' if num_found > 0 else '#d97706'};'>{'‚úÖ' if num_found > 0 else 'üòî'} **{task_type_msg}** | T√¨m th·∫•y {num_found} k·∫øt qu·∫£ ({search_time:.2f}s).</div>"
    
    initial_gallery_view = gallery_paths[:ITEMS_PER_PAGE]
    total_pages = int(np.ceil(num_found / ITEMS_PER_PAGE)) or 1
    page_info = f"Trang 1 / {total_pages}"
    
    return initial_gallery_view, status_msg, full_response, gallery_paths, 1, page_info

def handle_transcript_search(query1: str, query2: str, query3: str, transcript_searcher):
    gr.Info("B·∫Øt ƒë·∫ßu ƒëi·ªÅu tra transcript...")
    results = None
    if query1.strip(): results = transcript_searcher.search(query1, current_results=results)
    if query2.strip(): results = transcript_searcher.search(query2, current_results=results)
    if query3.strip(): results = transcript_searcher.search(query3, current_results=results)
    
    if results is None or results.empty:
        return "Nh·∫≠p truy v·∫•n ƒë·ªÉ b·∫Øt ƒë·∫ßu ho·∫∑c kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£.", pd.DataFrame(), None
        
    count_str = f"T√¨m th·∫•y: {len(results)} k·∫øt qu·∫£."
    display_df = results[['video_id', 'timestamp', 'transcript_text', 'keyframe_path']].copy()
    display_df.rename(columns={
        'video_id': 'Video ID',
        'timestamp': 'Timestamp (s)',
        'transcript_text': 'N·ªôi dung L·ªùi tho·∫°i',
        'keyframe_path': 'Keyframe Path'
    }, inplace=True)
    
    return count_str, display_df, results

def clear_transcript_search():
    return "", "", "", "T√¨m th·∫•y: 0 k·∫øt qu·∫£.", pd.DataFrame(), None

# ==============================================================================
# === HANDLERS CHO S·ª∞ KI·ªÜN SELECT (C·∫¨P NH·∫¨T TR·∫†M PH√ÇN T√çCH) ===
# ==============================================================================

def on_gallery_select(response_state: Dict, current_page: int, transcript_searcher, evt: gr.SelectData):
    empty_return = clear_analysis_panel()
    if not response_state or evt is None: return empty_return
    
    results = response_state.get("results", [])
    global_index = (current_page - 1) * ITEMS_PER_PAGE + evt.index
    if not results or global_index >= len(results): return empty_return
    
    selected_result = results[global_index]
    video_id = selected_result.get('video_id')
    video_path = selected_result.get('video_path')
    
    print("\n" + "="*20 + " DEBUG LOG: on_gallery_select " + "="*20)
    print(f"-> Selected video_id: {video_id}")
    print(f"-> Retrieved video_path from selected_result: '{video_path}'")
    print("="*65 + "\n")
    
    keyframe_path = selected_result.get('keyframe_path')
    timestamp = selected_result.get('timestamp', 0.0)
    
    full_transcript = get_full_transcript_for_video(video_id, transcript_searcher)
    video_clip_path = create_video_segment(video_path, timestamp, duration=30)
    analysis_html = create_detailed_info_html(selected_result, response_state.get("task_type"))
    full_video_link_html = generate_full_video_link(video_path)

    return (
        keyframe_path, gr.Video(value=video_clip_path, label=f"Clip 30s t·ª´ @ {timestamp:.2f}s"),
        full_transcript, analysis_html, full_video_link_html,
        selected_result, video_id, f"{timestamp:.2f}", None
    )

def on_transcript_select(results_state: pd.DataFrame, video_path_map: dict, transcript_searcher, evt: gr.SelectData):
    empty_return = clear_analysis_panel()
    if evt.value is None or results_state is None or results_state.empty: return empty_return
    
    try:
        selected_index = evt.index[0]
        selected_row = results_state.iloc[selected_index]
        video_id = selected_row['video_id']
        timestamp = selected_row['timestamp']
        keyframe_path = selected_row['keyframe_path']
        video_path = video_path_map.get(video_id)
        
        print("\n" + "="*20 + " DEBUG LOG: on_transcript_select " + "="*20)
        print(f"-> Selected video_id: {video_id}")
        print(f"-> Retrieved video_path from video_path_map: '{video_path}'")
        print("="*75 + "\n")
        
        if not video_path:
            gr.Error(f"Kh√¥ng t√¨m th·∫•y ƒë∆∞·ªùng d·∫´n cho video ID: {video_id}")
            return empty_return

        full_transcript = get_full_transcript_for_video(video_id, transcript_searcher)
        video_clip_path = create_video_segment(video_path, timestamp, duration=30)
        full_video_link_html = generate_full_video_link(video_path)
        
        candidate_for_submission = {
            "keyframe_id": os.path.basename(keyframe_path).replace('.jpg', ''),
            "video_id": video_id, "timestamp": timestamp, "keyframe_path": keyframe_path,
            "final_score": 0.0, "task_type": TaskType.KIS # M·∫∑c ƒë·ªãnh
        }

        return (
            keyframe_path, gr.Video(value=video_clip_path, label=f"Clip 30s t·ª´ @ {timestamp:.2f}s"),
            full_transcript, "", full_video_link_html,
            candidate_for_submission, video_id, f"{timestamp:.2f}", selected_index
        )
    except (IndexError, KeyError) as e:
        gr.Error(f"L·ªói khi x·ª≠ l√Ω l·ª±a ch·ªçn transcript: {e}")
        return empty_return

# ==============================================================================
# === HANDLERS CHO B·∫¢NG ƒêI·ªÄU KHI·ªÇN N·ªòP B√ÄI ===
# ==============================================================================

def add_to_submission_list(submission_list: list, candidate: dict, position: str):
    if not candidate:
        gr.Warning("Ch∆∞a c√≥ ·ª©ng vi√™n Visual n√†o ƒë∆∞·ª£c ch·ªçn ƒë·ªÉ th√™m!")
        return submission_list, format_submission_list_to_csv_string(submission_list)

    if len(submission_list) >= MAX_SUBMISSION_RESULTS:
        gr.Warning(f"Danh s√°ch ƒë√£ ƒë·∫°t gi·ªõi h·∫°n {MAX_SUBMISSION_RESULTS} k·∫øt qu·∫£.")
    else:
        # C·∫ßn th√™m 'task_type' v√†o candidate tr∆∞·ªõc khi th√™m
        item_to_add = candidate.copy()
        if 'task_type' not in item_to_add:
            item_to_add['task_type'] = TaskType.KIS
        
        if position == 'top':
            submission_list.insert(0, item_to_add)
        else:
            submission_list.append(item_to_add)
        gr.Success(f"ƒê√£ th√™m k·∫øt qu·∫£ Visual v√†o {'ƒë·∫ßu' if position == 'top' else 'cu·ªëi'} danh s√°ch!")
    
    return submission_list, format_submission_list_to_csv_string(submission_list)

def add_transcript_result_to_submission(submission_list: list, results_state: pd.DataFrame, selected_index: int, position: str):
    if selected_index is None or results_state is None or results_state.empty:
        gr.Warning("Ch∆∞a c√≥ k·∫øt qu·∫£ Transcript n√†o ƒë∆∞·ª£c ch·ªçn ƒë·ªÉ th√™m!")
        return submission_list, format_submission_list_to_csv_string(submission_list)
    
    try:
        selected_row = results_state.iloc[selected_index]
        candidate = {
            "video_id": selected_row['video_id'], "timestamp": selected_row['timestamp'],
            "keyframe_id": os.path.basename(selected_row['keyframe_path']).replace('.jpg', ''),
            "keyframe_path": selected_row['keyframe_path'],
            "task_type": TaskType.KIS # G√°n task_type m·∫∑c ƒë·ªãnh
        }
        return add_to_submission_list(submission_list, candidate, position)
    except IndexError:
        gr.Warning("L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá. Vui l√≤ng ch·ªçn l·∫°i m·ªôt d√≤ng trong b·∫£ng.")
        return submission_list, format_submission_list_to_csv_string(submission_list)

def sync_submission_state_to_editor(submission_list: list) -> str:
    gr.Info("B·∫£ng ƒëi·ªÅu khi·ªÉn ƒë√£ ƒë∆∞·ª£c ƒë·ªìng b·ªô h√≥a v·ªõi danh s√°ch k·∫øt qu·∫£.")
    return format_submission_list_to_csv_string(submission_list)

def clear_submission_list():
    gr.Info("ƒê√£ x√≥a danh s√°ch n·ªôp b√†i.")
    return [], ""

def handle_submission(submission_text: str, query_id: str):
    if not submission_text.strip():
        gr.Warning("B·∫£ng ƒëi·ªÅu khi·ªÉn n·ªôp b√†i ƒëang tr·ªëng.")
        return None
    if not query_id.strip():
        gr.Warning("Vui l√≤ng nh·∫≠p Query ID ƒë·ªÉ t·∫°o file.")
        return None
    
    try:
        # T√°i t·∫°o DataFrame t·ª´ text ng∆∞·ªùi d√πng ƒë√£ s·ª≠a
        # Gi·∫£ ƒë·ªãnh text l√† CSV kh√¥ng c√≥ header
        df = pd.read_csv(StringIO(submission_text.strip()), header=None)
        
        file_path = generate_submission_file(df, query_id=query_id)
        gr.Success(f"ƒê√£ t·∫°o file n·ªôp b√†i th√†nh c√¥ng t·ª´ n·ªôi dung ƒë√£ s·ª≠a: {os.path.basename(file_path)}")
        return file_path
    except Exception as e:
        gr.Error(f"L·ªói khi x·ª≠ l√Ω n·ªôi dung n·ªôp b√†i: {e}. H√£y ki·ªÉm tra l·∫°i ƒë·ªãnh d·∫°ng CSV.")
        return None

# ==============================================================================
# === HANDLERS CHO C√ÅC C√îNG C·ª§ PH·ª§ TR·ª¢ V√Ä N√öT TI·ªÜN √çCH ===
# ==============================================================================

def update_gallery_page(gallery_items: list, current_page: int, direction: str):
    if not gallery_items: return [], 1, "Trang 1 / 1"
    total_items = len(gallery_items)
    total_pages = int(np.ceil(total_items / ITEMS_PER_PAGE)) or 1
    new_page = min(total_pages, current_page + 1) if direction == "‚ñ∂Ô∏è Trang sau" else max(1, current_page - 1)
    start_index = (new_page - 1) * ITEMS_PER_PAGE
    end_index = start_index + ITEMS_PER_PAGE
    return gallery_items[start_index:end_index], new_page, f"Trang {new_page} / {total_pages}"

def calculate_frame_number(video_id: str, time_input: str, fps_map: dict):
    if not video_id or not time_input: return "Vui l√≤ng nh·∫≠p Video ID v√† Th·ªùi gian."
    try:
        time_input_str = str(time_input).strip()
        if ':' in time_input_str:
            parts = time_input_str.split(':')
            minutes, seconds = int(parts[0]), float(parts[1])
            timestamp = minutes * 60 + seconds
        else:
            timestamp = float(time_input_str)
            
        fps = fps_map.get(video_id, 30.0)
        return str(round(timestamp * fps))
    except Exception:
        return f"L·ªói: ƒê·ªãnh d·∫°ng th·ªùi gian '{time_input}' kh√¥ng h·ª£p l·ªá."

def clear_all():
    # T·∫≠p h·ª£p t·∫•t c·∫£ c√°c gi√° tr·ªã reset v√†o m·ªôt tuple l·ªõn
    return (
        # M·∫Øt Th·∫ßn
        "", gr.Gallery(value=None), "", None, [], 1, "Trang 1 / 1",
        # Tai Th√≠nh
        "", "", "", "T√¨m th·∫•y: 0 k·∫øt qu·∫£.", pd.DataFrame(), None,
        # Tr·∫°m Ph√¢n t√≠ch H·ª£p nh·∫•t
        None, None, "", "", "", None,
        # B·∫£ng ƒëi·ªÅu khi·ªÉn N·ªôp b√†i
        [], "",
        # M√°y t√≠nh
        "", "", "",
        # V√πng Xu·∫•t file
        "", None
    )
    
def handle_view_full_video(selected_candidate: Dict):
    """
    Sao ch√©p video g·ªëc t·ª´ /kaggle/input sang /kaggle/working ƒë·ªÉ ph√°t.
    ƒê√¢y l√† gi·∫£i ph√°p "Copy-on-Demand".
    """
    if not selected_candidate:
        gr.Warning("Vui l√≤ng ch·ªçn m·ªôt k·∫øt qu·∫£ tr∆∞·ªõc khi xem video g·ªëc.")
        return None

    source_path = selected_candidate.get('video_path')
    if not source_path or not os.path.exists(source_path):
        gr.Error(f"Kh√¥ng t√¨m th·∫•y file video ngu·ªìn t·∫°i: {source_path}")
        return None

    # T·∫°o th∆∞ m·ª•c ƒë√≠ch n·∫øu ch∆∞a c√≥
    destination_dir = "/kaggle/working/temp_full_videos"
    os.makedirs(destination_dir, exist_ok=True)
    
    # T·∫°o ƒë∆∞·ªùng d·∫´n ƒë√≠ch
    destination_path = os.path.join(destination_dir, os.path.basename(source_path))

    # Sao ch√©p file (ch·ªâ khi n√≥ ch∆∞a t·ªìn t·∫°i ·ªü ƒë√≠ch ƒë·ªÉ ti·∫øt ki·ªám th·ªùi gian)
    if not os.path.exists(destination_path):
        gr.Info(f"ƒêang sao ch√©p video {os.path.basename(source_path)} ƒë·ªÉ chu·∫©n b·ªã ph√°t...")
        try:
            shutil.copy(source_path, destination_path)
            gr.Success("Sao ch√©p ho√†n t·∫•t! B·∫Øt ƒë·∫ßu ph√°t video.")
        except Exception as e:
            gr.Error(f"L·ªói khi sao ch√©p video: {e}")
            return None
    else:
        gr.Info("Video ƒë√£ c√≥ s·∫µn, b·∫Øt ƒë·∫ßu ph√°t.")

    # Tr·∫£ v·ªÅ ƒë∆∞·ªùng d·∫´n m·ªõi, an to√†n ƒë·ªÉ Gradio ph√°t
    return gr.Video(value=destination_path, label=f"Video G·ªëc: {os.path.basename(source_path)}")