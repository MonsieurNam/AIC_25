from io import StringIO
import gradio as gr
import pandas as pd
import numpy as np
import time
import os
import traceback
from typing import Dict, Any, List, Optional
import json
# Local imports from other project files
from config import ITEMS_PER_PAGE, MAX_SUBMISSION_RESULTS, VIDEO_BASE_PATH, TRANSCRIPTS_JSON_DIR 
from ui_helpers import create_detailed_info_html, format_submission_list_for_display
from search_core.task_analyzer import TaskType
from utils.formatting import format_list_for_submission, format_results_for_mute_gallery, format_submission_list_to_csv_string 
from utils import create_video_segment, generate_submission_file
import re 

# ==============================================================================
# === G·ªåNG K√åM 1: HANDLERS CHO TAB "M·∫ÆT TH·∫¶N" (VISUAL SCOUT) ===
# ==============================================================================

def perform_search(
    # Inputs from UI
    query_text: str, num_results: int, w_clip: float, w_obj: float, 
    w_semantic: float, lambda_mmr: float,
    # Backend instance
    master_searcher
):
    """
    X·ª≠ l√Ω s·ª± ki·ªán t√¨m ki·∫øm ch√≠nh cho Tab Visual.
    """
    if not query_text.strip():
        gr.Warning("Vui l√≤ng nh·∫≠p truy v·∫•n t√¨m ki·∫øm!")
        return [], "<div style='color: orange;'>‚ö†Ô∏è Vui l√≤ng nh·∫≠p truy v·∫•n.</div>", None, "", [], 1, "Trang 1 / 1"

    loading_html = "<div style='color: #4338ca;'>‚è≥ ƒêang qu√©t visual... AI ƒëang ph√¢n t√≠ch v√† t√¨m ki·∫øm.</div>"
    yield ([], loading_html, None, "", [], 1, "Trang 1 / 1")
    
    try:
        config = {
            "top_k_final": int(num_results), "w_clip": w_clip, "w_obj": w_obj, 
            "w_semantic": w_semantic, "lambda_mmr": lambda_mmr
        }
        start_time = time.time()
        full_response = master_searcher.search(query=query_text, config=config)
        search_time = time.time() - start_time
    except Exception as e:
        traceback.print_exc()
        status_msg = f"<div style='color: red;'>üî• L·ªói backend: {e}</div>"
        return [], status_msg, None, "", [], 1, "Trang 1 / 1"

    gallery_paths = format_results_for_mute_gallery(full_response)
    num_found = len(gallery_paths)
    task_type_msg = full_response.get('task_type', TaskType.KIS).value
    
    if num_found == 0:
        status_msg = f"<div style='color: #d97706;'>üòî **{task_type_msg}** | Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£ n√†o ({search_time:.2f}s).</div>"
    else:
        status_msg = f"<div style='color: #166534;'>‚úÖ **{task_type_msg}** | T√¨m th·∫•y {num_found} k·∫øt qu·∫£ ({search_time:.2f}s).</div>"

    initial_gallery_view = gallery_paths[:ITEMS_PER_PAGE]
    total_pages = int(np.ceil(num_found / ITEMS_PER_PAGE)) or 1
    page_info = f"Trang 1 / {total_pages}"
    
    yield (
        initial_gallery_view, status_msg, full_response, str(full_response.get('query_analysis', {})),
        gallery_paths, 1, page_info
    )

def update_gallery_page(gallery_items: List, current_page: int, direction: str):
    """C·∫≠p nh·∫≠t trang cho gallery visual."""
    if not gallery_items:
        return [], 1, "Trang 1 / 1"
    total_items = len(gallery_items)
    total_pages = int(np.ceil(total_items / ITEMS_PER_PAGE)) or 1
    new_page = min(total_pages, current_page + 1) if direction == "‚ñ∂Ô∏è Trang sau" else max(1, current_page - 1)
    start_index = (new_page - 1) * ITEMS_PER_PAGE
    end_index = start_index + ITEMS_PER_PAGE
    return gallery_items[start_index:end_index], new_page, f"Trang {new_page} / {total_pages}"

# ==============================================================================
# === G·ªåNG K√åM 2: HANDLERS CHO TAB "TAI TH√çNH" (TRANSCRIPT INTEL) ===
# ==============================================================================

def handle_transcript_search(query1: str, query2: str, query3: str, transcript_searcher):
    """
    X·ª≠ l√Ω s·ª± ki·ªán t√¨m ki·∫øm l·ªìng nhau tr√™n transcript.
    """
    gr.Info("B·∫Øt ƒë·∫ßu ƒëi·ªÅu tra transcript...")
    results = None
    if query1.strip():
        results = transcript_searcher.search(query1, current_results=results)
    if query2.strip():
        results = transcript_searcher.search(query2, current_results=results)
    if query3.strip():
        results = transcript_searcher.search(query3, current_results=results)

    if results is None: # Ng∆∞·ªùi d√πng kh√¥ng nh·∫≠p g√¨
        return "Nh·∫≠p truy v·∫•n ƒë·ªÉ b·∫Øt ƒë·∫ßu ƒëi·ªÅu tra.", pd.DataFrame(), None

    count_str = f"T√¨m th·∫•y: {len(results)} k·∫øt qu·∫£."
    # Ch·ªâ hi·ªÉn th·ªã c√°c c·ªôt c·∫ßn thi·∫øt tr√™n UI
    display_df = results[['video_id', 'timestamp', 'transcript_text', 'keyframe_path']]
    
    return count_str, display_df, results # Tr·∫£ v·ªÅ full results cho state

def on_transcript_select(results_state: pd.DataFrame, evt: gr.SelectData):
    """
    X·ª≠ l√Ω khi ng∆∞·ªùi d√πng ch·ªçn m·ªôt d√≤ng trong b·∫£ng k·∫øt qu·∫£ transcript.
    S·∫Ω t·∫£i v√† tua video, hi·ªÉn th·ªã keyframe, v√† hi·ªÉn th·ªã to√†n b·ªô transcript.
    """
    # Gi√° tr·ªã tr·∫£ v·ªÅ m·∫∑c ƒë·ªãnh khi c√≥ l·ªói ho·∫∑c kh√¥ng c√≥ l·ª±a ch·ªçn
    empty_return = None, "Click v√†o m·ªôt d√≤ng k·∫øt qu·∫£ ƒë·ªÉ xem chi ti·∫øt.", None
    
    if evt.value is None or results_state is None or results_state.empty:
        return empty_return
    
    try:
        # L·∫•y th√¥ng tin t·ª´ d√≤ng ƒë∆∞·ª£c ch·ªçn trong DataFrame state
        selected_row = results_state.iloc[evt.index[0]]
        video_id = selected_row['video_id']
        timestamp = selected_row['timestamp']
        keyframe_path = selected_row['keyframe_path']
        
        # --- 1. Chu·∫©n b·ªã ƒë·∫ßu ra cho Video Player ---
        video_path = os.path.join(VIDEO_BASE_PATH, f"{video_id}.mp4")
        video_output = None
        if os.path.exists(video_path):
            # T·∫°o component gr.Video v·ªõi gi√° tr·ªã m·ªõi ƒë·ªÉ tua ƒë·∫øn ƒë√∫ng th·ªùi ƒëi·ªÉm
            video_output = gr.Video(value=video_path, start_time=timestamp)
        else:
            gr.Warning(f"Kh√¥ng t√¨m th·∫•y file video: {video_path}")

        # --- 2. Chu·∫©n b·ªã ƒë·∫ßu ra cho Full Transcript Display ---
        full_transcript_text = f"ƒêang t√¨m transcript cho video {video_id}..."
        transcript_json_path = os.path.join(TRANSCRIPTS_JSON_DIR, f"{video_id}.json")
        
        if not os.path.exists(transcript_json_path):
            full_transcript_text = f"L·ªói: Kh√¥ng t√¨m th·∫•y file transcript t·∫°i ƒë∆∞·ªùng d·∫´n:\n{transcript_json_path}"
        else:
            try:
                with open(transcript_json_path, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    # L·∫•y text t·ª´ key "text", strip ƒë·ªÉ ƒë·∫£m b·∫£o s·∫°ch s·∫Ω
                    full_transcript_text = data.get("text", "L·ªói: File JSON kh√¥ng ch·ª©a key 'text' ho·∫∑c c√≥ ƒë·ªãnh d·∫°ng kh√¥ng ƒë√∫ng.").strip()
            except Exception as e:
                full_transcript_text = f"L·ªói khi ƒë·ªçc ho·∫∑c ph√¢n t√≠ch file JSON '{transcript_json_path}': {e}"
        
        # --- 3. Tr·∫£ v·ªÅ t·∫•t c·∫£ c√°c gi√° tr·ªã cho c√°c component output ---
        # Th·ª© t·ª± ph·∫£i kh·ªõp v·ªõi danh s√°ch `outputs` trong app.py
        return video_output, full_transcript_text, keyframe_path

    except (IndexError, KeyError) as e:
        gr.Error(f"L·ªói khi x·ª≠ l√Ω l·ª±a ch·ªçn: {e}")
        return None, "C√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω l·ª±a ch·ªçn c·ªßa b·∫°n.", None

# === H√ÄM ƒê∆Ø·ª¢C C·∫¨P NH·∫¨T ƒê·ªÇ RESET C√ÅC COMPONENT M·ªöI ===
def clear_transcript_search():
    """X√≥a c√°c √¥ t√¨m ki·∫øm v√† k·∫øt qu·∫£ c·ªßa Tab Tai Th√≠nh."""
    # Ph·∫£i tr·∫£ v·ªÅ ƒë·ªß gi√° tr·ªã cho t·∫•t c·∫£ c√°c output c·ªßa n√∫t clear
    return (
        "", # transcript_query_1
        "", # transcript_query_2
        "", # transcript_query_3
        "T√¨m th·∫•y: 0 k·∫øt qu·∫£.", # transcript_results_count
        pd.DataFrame(columns=["Video ID", "Timestamp (s)", "N·ªôi dung L·ªùi tho·∫°i", "Keyframe Path"]), # transcript_results_df
        None, # transcript_results_state
        None, # transcript_video_player
        "",   # full_transcript_display
        None  # transcript_keyframe_display
    )

# ==============================================================================
# === HANDLERS D√ôNG CHUNG (PH√ÇN T√çCH, N·ªòP B√ÄI, C√îNG C·ª§) ===
# ==============================================================================

def _get_full_video_path_from_keyframe(keyframe_path: str) -> Optional[str]:
    """Helper: Suy ra ƒë∆∞·ªùng d·∫´n video ƒë·∫ßy ƒë·ªß t·ª´ ƒë∆∞·ªùng d·∫´n keyframe."""
    if not keyframe_path: return None
    try:
        # e.g., /.../keyframes/L21_V001/001.jpg -> L21_V001
        video_id = os.path.basename(os.path.dirname(keyframe_path))
        full_path = os.path.join(VIDEO_BASE_PATH, f"{video_id}.mp4")
        return full_path if os.path.exists(full_path) else None
    except Exception:
        return None

def on_gallery_select(response_state: Dict, current_page: int, evt: gr.SelectData):
    """
    X·ª≠ l√Ω khi click v√†o ·∫£nh trong gallery.
    PHI√äN B·∫¢N V2: C·∫≠p nh·∫≠t th√™m c√¥ng c·ª• t√≠nh to√°n v√† n√∫t xem full video.
    """
    empty_return = (None, None, "", None, None, "", "")
    if not response_state or evt is None: return empty_return

    results = response_state.get("results", [])
    global_index = (current_page - 1) * ITEMS_PER_PAGE + evt.index
    
    if not results or global_index >= len(results): return empty_return

    selected_result = results[global_index]
    keyframe_path = selected_result.get('keyframe_path')
    video_path = selected_result.get('video_path') # ƒê√£ c√≥ s·∫µn trong metadata
    timestamp = selected_result.get('timestamp')
    video_id = selected_result.get('video_id')

    # T·∫°o clip 30 gi√¢y
    video_clip_path = create_video_segment(video_path, timestamp, duration=30)
    
    # T·∫°o HTML hi·ªÉn th·ªã ƒëi·ªÉm s·ªë
    analysis_html = create_detailed_info_html(selected_result, response_state.get("task_type"))

    return (
        keyframe_path,                      # selected_image_display
        video_clip_path,                    # video_player
        analysis_html,                      # analysis_display_html
        selected_result,                    # selected_candidate_for_submission
        video_id,                           # frame_calculator_video_id
        timestamp,                          # frame_calculator_timestamp
        video_path                          # State ·∫©n ƒë·ªÉ n√∫t "M·ªü video g·ªëc" s·ª≠ d·ª•ng
    )
    
def get_full_video_path_for_button(video_path):
    """T·∫°o ra m·ªôt file t·∫°m th·ªùi ƒë·ªÉ Gradio c√≥ th·ªÉ ph·ª•c v·ª• n√≥."""
    if video_path and os.path.exists(video_path):
        return video_path
    return None

def add_to_submission_list(
    submission_list: list, candidate: Dict, response_state: Dict, position: str
):
    """Th√™m ·ª©ng vi√™n v√† c·∫≠p nh·∫≠t c·∫£ danh s√°ch hi·ªÉn th·ªã v√† text editor."""
    if not candidate:
        gr.Warning("Ch∆∞a c√≥ ·ª©ng vi√™n n√†o ƒë∆∞·ª£c ch·ªçn ƒë·ªÉ th√™m!")
        text_display = format_submission_list_for_display(submission_list)
        csv_editor_content = format_submission_list_to_csv_string(submission_list)
        return text_display, submission_list, gr.Dropdown(), csv_editor_content

    task_type = response_state.get("task_type")
    item_to_add = {**candidate, 'task_type': task_type}
    
    if len(submission_list) >= MAX_SUBMISSION_RESULTS:
        gr.Warning(f"Danh s√°ch ƒë√£ ƒë·∫°t gi·ªõi h·∫°n {MAX_SUBMISSION_RESULTS} k·∫øt qu·∫£.")
        submission_list = submission_list[:MAX_SUBMISSION_RESULTS]
    else:
        if position == 'top':
            submission_list.insert(0, item_to_add)
        else:
            submission_list.append(item_to_add)
        gr.Success(f"ƒê√£ th√™m k·∫øt qu·∫£ v√†o {'ƒë·∫ßu' if position == 'top' else 'cu·ªëi'} danh s√°ch!")

    text_display = format_submission_list_for_display(submission_list)
    csv_editor_content = format_submission_list_to_csv_string(submission_list)
    new_choices = [f"{i+1}. {item.get('keyframe_id') or 'TRAKE'}" for i, item in enumerate(submission_list)]
    return text_display, submission_list, gr.Dropdown(choices=new_choices), csv_editor_content

def modify_submission_list(
    submission_list: list, selected_item_index_str: str, action: str
):
    """Modifies the submission list (move up/down, remove)."""
    if not selected_item_index_str:
        gr.Warning("Vui l√≤ng ch·ªçn m·ªôt m·ª•c t·ª´ danh s√°ch ƒë·ªÉ thao t√°c.")
        return format_submission_list_for_display(submission_list), submission_list, selected_item_index_str
    try:
        index = int(selected_item_index_str.split('.')[0]) - 1
        if not (0 <= index < len(submission_list)): raise ValueError("Index out of bounds")
    except:
        gr.Error("L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá.")
        return format_submission_list_for_display(submission_list), submission_list, None

    if action == 'move_up' and index > 0:
        submission_list[index], submission_list[index-1] = submission_list[index-1], submission_list[index]
    elif action == 'move_down' and index < len(submission_list) - 1:
        submission_list[index], submission_list[index+1] = submission_list[index+1], submission_list[index]
    elif action == 'remove':
        submission_list.pop(index)

    new_choices = [f"{i+1}. {item.get('keyframe_id') or 'TRAKE (' + str(item.get('video_id')) + ')'}" for i, item in enumerate(submission_list)]
    return format_submission_list_for_display(submission_list), submission_list, gr.Dropdown(choices=new_choices, value=None)
    
def calculate_frame_number(video_id: str, time_input: str, fps_map: dict):
    """
    T√≠nh to√°n s·ªë th·ª© t·ª± frame t·ª´ input c√≥ th·ªÉ l√† gi√¢y ho·∫∑c "ph√∫t:gi√¢y".
    """
    if not video_id or not time_input:
        return "Vui l√≤ng nh·∫≠p Video ID v√† Th·ªùi gian."
    
    timestamp = 0.0
    try:
        time_input_str = str(time_input).strip()
        match = re.match(r'(\d+)\s*:\s*(\d+(\.\d+)?)', time_input_str)
        if match:
            minutes = int(match.group(1))
            seconds = float(match.group(2))
            timestamp = minutes * 60 + seconds
            gr.Info(f"ƒê√£ chuy·ªÉn ƒë·ªïi '{time_input_str}' th√†nh {timestamp:.2f} gi√¢y.")
        else:
            timestamp = float(time_input_str)
    except (ValueError, TypeError):
        return f"L·ªói: ƒê·ªãnh d·∫°ng th·ªùi gian '{time_input}' kh√¥ng h·ª£p l·ªá."

    fps = fps_map.get(video_id, 30.0)
    frame_number = round(timestamp * fps)
    
    return str(frame_number)

def add_transcript_result_to_submission(
    submission_list: list, 
    results_state: pd.DataFrame, 
    selected_index: gr.SelectData,
    position: str
):
    """
    Tr√≠ch xu·∫•t th√¥ng tin t·ª´ d√≤ng DataFrame ƒë∆∞·ª£c ch·ªçn v√† th√™m v√†o danh s√°ch n·ªôp b√†i.
    """
    if selected_index is None or results_state is None or results_state.empty:
        gr.Warning("Vui l√≤ng ch·ªçn m·ªôt k·∫øt qu·∫£ t·ª´ b·∫£ng transcript tr∆∞·ªõc khi th√™m!")
        text_display = format_submission_list_for_display(submission_list)
        csv_editor_content = format_submission_list_to_csv_string(submission_list)
        return text_display, submission_list, gr.Dropdown(), csv_editor_content

    try:
        selected_row = results_state.iloc[selected_index.index[0]]
        candidate = {
            "video_id": selected_row['video_id'],
            "timestamp": selected_row['timestamp'],
            "keyframe_id": f"transcript_{selected_row['timestamp']:.2f}s",
            "task_type": TaskType.KIS
        }
        # T√°i s·ª≠ d·ª•ng logic c·ªßa h√†m c≈©
        return add_to_submission_list(submission_list, candidate, {"task_type": TaskType.KIS}, position)
    except (IndexError, KeyError) as e:
        gr.Error(f"L·ªói khi x·ª≠ l√Ω l·ª±a ch·ªçn transcript: {e}")
        text_display = format_submission_list_for_display(submission_list)
        csv_editor_content = format_submission_list_to_csv_string(submission_list)
        return text_display, submission_list, gr.Dropdown(), csv_editor_content
        
# === H√ÄM M·ªöI ===
def prepare_submission_for_edit(submission_list: list):
    """
    Chuy·ªÉn danh s√°ch n·ªôp b√†i th√†nh m·ªôt chu·ªói CSV ƒë·ªÉ ng∆∞·ªùi d√πng c√≥ th·ªÉ ch·ªânh s·ª≠a.
    """
    gr.Info("ƒê√£ ƒë·ªìng b·ªô h√≥a danh s√°ch v√†o B·∫£ng ƒëi·ªÅu khi·ªÉn.")
    return format_submission_list_to_csv_string(submission_list)

def handle_submission(submission_csv_text: str, query_id: str):
    """
    T·∫°o file CSV n·ªôp b√†i t·ª´ n·ªôi dung text ƒë√£ ƒë∆∞·ª£c ch·ªânh s·ª≠a.
    """
    if not submission_csv_text or not submission_csv_text.strip():
        gr.Warning("N·ªôi dung n·ªôp b√†i ƒëang tr·ªëng.")
        return None
    if not query_id.strip():
        gr.Warning("Vui l√≤ng nh·∫≠p Query ID ƒë·ªÉ t·∫°o file.")
        return None
    
    output_dir = "/kaggle/working/submissions"
    os.makedirs(output_dir, exist_ok=True)
    file_path = os.path.join(output_dir, f"{query_id}_submission.csv")
    
    try:
        # ƒê·∫£m b·∫£o d·ªØ li·ªáu text l√† CSV h·ª£p l·ªá tr∆∞·ªõc khi ghi
        pd.read_csv(StringIO(submission_csv_text), header=None)
        with open(file_path, 'w', encoding='utf-8') as f:
            f.write(submission_csv_text.strip())
        gr.Success(f"ƒê√£ t·∫°o file n·ªôp b√†i th√†nh c√¥ng t·ª´ n·ªôi dung ƒë√£ s·ª≠a!")
        return file_path
    except Exception as e:
        gr.Error(f"L·ªói ƒë·ªãnh d·∫°ng CSV: {e}. Vui l√≤ng ki·ªÉm tra l·∫°i n·ªôi dung trong B·∫£ng ƒëi·ªÅu khi·ªÉn.")
        return None
    
def clear_submission_list():
    """X√≥a to√†n b·ªô danh s√°ch n·ªôp b√†i."""
    gr.Info("ƒê√£ x√≥a danh s√°ch n·ªôp b√†i.")
    return "Ch∆∞a c√≥ k·∫øt qu·∫£ n√†o ƒë∆∞·ª£c th√™m v√†o.", [], gr.Dropdown(choices=[], value=None)
    
# ==============================================================================
# === HANDLER D·ªåN D·∫∏P TO√ÄN B·ªò H·ªÜ TH·ªêNG ===
# ==============================================================================

def clear_all():
    """
    Reset to√†n b·ªô giao di·ªán v·ªÅ tr·∫°ng th√°i ban ƒë·∫ßu.
    Tr·∫£ v·ªÅ m·ªôt tuple l·ªõn ch·ª©a t·∫•t c·∫£ c√°c gi√° tr·ªã m·∫∑c ƒë·ªãnh.
    """
    # Gi√° tr·ªã tr·∫£ v·ªÅ ph·∫£i kh·ªõp 1-1 v·ªõi danh s√°ch `clear_all_outputs` trong app.py
    return (
        # --- Tab M·∫Øt Th·∫ßn (7 outputs) ---
        [],                                         # results_gallery
        "",                                         # status_output
        None,                                       # response_state
        "Trang 1 / 1",                              # page_info_display
        [],                                         # gallery_items_state
        1,                                          # current_page_state
        
        # --- Tab Tai Th√≠nh (6 outputs) ---
        "",                                         # transcript_query_1
        "",                                         # transcript_query_2
        "",                                         # transcript_query_3
        "T√¨m th·∫•y: 0 k·∫øt qu·∫£.",                      # transcript_results_count
        pd.DataFrame(columns=["Video ID", "Timestamp (s)", "N·ªôi dung L·ªùi tho·∫°i", "Keyframe Path"]), # transcript_results_df
        None,                                       # transcript_video_player
        None,                                       # transcript_results_state

        # --- C·ªôt Ph·∫£i: Tr·∫°m Ph√¢n t√≠ch (4 outputs) ---
        None,                                       # selected_image_display
        None,                                       # video_player
        None,                                       # selected_candidate_for_submission
        None,                                       # full_video_path_state (State)

        # --- C·ªôt Ph·∫£i: C√¥ng c·ª• t√≠nh to√°n (3 outputs) ---
        "",                                         # frame_calculator_video_id
        0,                                          # frame_calculator_timestamp
        "",                                         # frame_calculator_output

        # --- C·ªôt Ph·∫£i: V√πng N·ªôp b√†i (5 outputs) ---
        "Ch∆∞a c√≥ k·∫øt qu·∫£ n√†o ƒë∆∞·ª£c th√™m v√†o.",        # submission_list_display
        [],                                         # submission_list_state
        gr.Dropdown(choices=[], value=None),        # submission_list_selector
        "",                                         # query_id_input
        None,                                       # submission_file_output
    )