import gradio as gr
import pandas as pd
import numpy as np
import time
import os
import traceback
import json
import re
from io import StringIO
from typing import Dict, List
import glob

# --- Local imports ---
from config import ITEMS_PER_PAGE, MAX_SUBMISSION_RESULTS, VIDEO_BASE_PATH, TRANSCRIPTS_JSON_DIR
from ui_helpers import create_detailed_info_html
from search_core.task_analyzer import TaskType
from utils.formatting import (
    format_list_for_submission, 
    format_results_for_mute_gallery,
    format_submission_list_to_csv_string
)
from utils import create_video_segment

# ==============================================================================
# === B·ªò NH·ªö CACHE C·ª§C B·ªò "T·ª∞ L·ª∞C C√ÅNH SINH" ===
# ==============================================================================
print("--- [event_handlers.py] ƒêang x√¢y d·ª±ng B·ªô nh·ªõ ƒë·ªám cho ƒê∆∞·ªùng d·∫´n Video... ---")
try:
    _all_video_files = glob.glob(os.path.join(VIDEO_BASE_PATH, "**", "*.mp4"), recursive=True)
    VIDEO_PATH_MAP_CACHE = {os.path.basename(f).replace('.mp4', ''): f for f in _all_video_files}
    print(f"--- [event_handlers.py] ƒê√£ cache {len(VIDEO_PATH_MAP_CACHE)} ƒë∆∞·ªùng d·∫´n video. ---")
except Exception as e:
    print(f"--- [event_handlers.py] L·ªñI khi x√¢y d·ª±ng cache ƒë∆∞·ªùng d·∫´n video: {e} ---")
    VIDEO_PATH_MAP_CACHE = {}

# ==============================================================================
# === C√ÅC H√ÄM X·ª¨ L√ù S·ª∞ KI·ªÜN ===
# ==============================================================================
def generate_full_video_link(video_path: str) -> str:
    """
    T·∫°o m·ªôt ƒëo·∫°n m√£ HTML ch·ª©a link ƒë·ªÉ m·ªü video g·ªëc trong tab m·ªõi.
    S·ª≠ d·ª•ng ƒë·ªãnh d·∫°ng '/file=' ƒë·∫∑c bi·ªát c·ªßa Gradio ƒë·ªÉ ph·ª•c v·ª• file.
    """
    if not video_path or not os.path.exists(video_path):
        return "<p style='color: #888; text-align: center; padding: 10px;'>Ch·ªçn m·ªôt k·∫øt qu·∫£ ƒë·ªÉ xem link video g·ªëc.</p>"
    
    # T·∫°o URL h·ª£p l·ªá m√† Gradio c√≥ th·ªÉ ph·ª•c v·ª•
    file_url = f"/file={video_path}"
    
    # T·∫°o HTML v·ªõi link v√† style cho n√∫t b·∫•m
    return f"""
    <div style='text-align: center; margin-top: 10px;'>
        <a href='{file_url}' target='_blank' 
           style='background-color: #4CAF50; color: white; padding: 10px 15px; text-align: center; text-decoration: none; display: inline-block; border-radius: 8px; font-weight: bold; cursor: pointer;'>
           üé¨ M·ªü Video G·ªëc (To√†n b·ªô) trong Tab m·ªõi
        </a>
    </div>
    """
    
def get_full_transcript_for_video(video_id: str, transcript_searcher) -> str:
    """
    Tr√≠ch xu·∫•t to√†n b·ªô transcript c·ªßa m·ªôt video t·ª´ TranscriptSearcher.
    """
    if not transcript_searcher or transcript_searcher.full_data is None:
        return "L·ªói: Transcript engine ch∆∞a s·∫µn s√†ng."
    
    try:
        video_transcripts = transcript_searcher.full_data[
            transcript_searcher.full_data['video_id'] == video_id
        ]
        full_text = " ".join(video_transcripts['transcript_text'].tolist())
        return full_text if full_text.strip() else "Video n√†y kh√¥ng c√≥ l·ªùi tho·∫°i."
    except Exception:
        return "Kh√¥ng th·ªÉ t·∫£i transcript cho video n√†y."
    
def clear_analysis_panel():
    return None, None, "", "", None, "", "", ""

def perform_search(query_text: str, num_results: int, w_clip: float, w_obj: float, w_semantic: float, lambda_mmr: float, master_searcher):
    if not query_text.strip():
        gr.Warning("Vui l√≤ng nh·∫≠p truy v·∫•n t√¨m ki·∫øm!")
        return [], "<div style='color: orange;'>‚ö†Ô∏è Vui l√≤ng nh·∫≠p truy v·∫•n.</div>", None, "Trang 1 / 1", [], 1
    gr.Info("B·∫Øt ƒë·∫ßu qu√©t visual...")
    try:
        config = {"top_k_final": int(num_results), "w_clip": w_clip, "w_obj": w_obj, "w_semantic": w_semantic, "lambda_mmr": lambda_mmr}
        start_time = time.time()
        full_response = master_searcher.search(query=query_text, config=config)
        search_time = time.time() - start_time
    except Exception as e:
        traceback.print_exc()
        return [], f"<div style='color: red;'>üî• L·ªói backend: {e}</div>", None, "Trang 1 / 1", [], 1
    gallery_paths = format_results_for_mute_gallery(full_response)
    num_found = len(gallery_paths)
    task_type_msg = full_response.get('task_type', TaskType.KIS).value
    status_msg = f"<div style='color: {'#166534' if num_found > 0 else '#d97706'};'>{'‚úÖ' if num_found > 0 else 'üòî'} **{task_type_msg}** | T√¨m th·∫•y {num_found} k·∫øt qu·∫£ ({search_time:.2f}s).</div>"
    initial_gallery_view = gallery_paths[:ITEMS_PER_PAGE]
    total_pages = int(np.ceil(num_found / ITEMS_PER_PAGE)) or 1
    page_info = f"Trang 1 / {total_pages}"
    return initial_gallery_view, status_msg, full_response, page_info, gallery_paths, 1

def update_gallery_page(gallery_items: list, current_page: int, direction: str):
    if not gallery_items: return [], 1, "Trang 1 / 1"
    total_items = len(gallery_items)
    total_pages = int(np.ceil(total_items / ITEMS_PER_PAGE)) or 1
    new_page = min(total_pages, current_page + 1) if direction == "‚ñ∂Ô∏è Trang sau" else max(1, current_page - 1)
    start_index = (new_page - 1) * ITEMS_PER_PAGE
    end_index = start_index + ITEMS_PER_PAGE
    return gallery_items[start_index:end_index], new_page, f"Trang {new_page} / {total_pages}"

def handle_transcript_search(query1: str, query2: str, query3: str, transcript_searcher):
    gr.Info("B·∫Øt ƒë·∫ßu ƒëi·ªÅu tra transcript...")
    results = None
    if query1.strip(): results = transcript_searcher.search(query1, current_results=results)
    if query2.strip(): results = transcript_searcher.search(query2, current_results=results)
    if query3.strip(): results = transcript_searcher.search(query3, current_results=results)
    if results is None:
        return "Nh·∫≠p truy v·∫•n ƒë·ªÉ b·∫Øt ƒë·∫ßu ƒëi·ªÅu tra.", pd.DataFrame(), None
    count_str = f"T√¨m th·∫•y: {len(results)} k·∫øt qu·∫£."
    display_df = results[['video_id', 'timestamp', 'transcript_text', 'keyframe_path']]
    return count_str, display_df, results

def clear_transcript_search():
    analysis_clear_vals = clear_analysis_panel()
    main_vals = ("", "", "", "T√¨m th·∫•y: 0 k·∫øt qu·∫£.", pd.DataFrame(), None)
    return *main_vals, *analysis_clear_vals

def on_gallery_select(response_state: dict, current_page: int, evt: gr.SelectData):
    empty_return = (None, None, "", "", None, "", "0.0", None)
    if not isinstance(evt, gr.SelectData) or not response_state: return empty_return
    results = response_state.get("results", [])
    global_index = (current_page - 1) * ITEMS_PER_PAGE + evt.index
    if not results or global_index >= len(results): return empty_return
    
    selected_result = results[global_index]
    keyframe_path = selected_result.get('keyframe_path')
    video_path = selected_result.get('video_path')
    timestamp = selected_result.get('timestamp', 0.0)
    video_id = selected_result.get('video_id')

    # L·∫•y to√†n b·ªô transcript cho video n√†y
    full_transcript = get_full_transcript_for_video(video_id, transcript_searcher)
    
    # T·∫°o clip 30 gi√¢y
    video_clip_path = create_video_segment(video_path, timestamp, duration=30)
    
    # T·∫°o HTML hi·ªÉn th·ªã ƒëi·ªÉm s·ªë
    analysis_html = create_detailed_info_html(selected_result, response_state.get("task_type"))

    # T·∫°o link video g·ªëc
    full_video_link_html = generate_full_video_link(video_path)

    return (
        keyframe_path,                  # selected_image_display
        gr.Video(value=video_clip_path, label=f"Clip 30s t·ª´ @ {timestamp:.2f}s"), # video_player
        full_transcript,                # full_transcript_display
        analysis_html,                  # analysis_display_html
        full_video_link_html,           # view_full_video_html
        selected_result,                # selected_candidate_for_submission
        video_id,                       # frame_calculator_video_id
        f"{timestamp:.2f}" ,
        None  
    )

def on_transcript_select(
    results_state: pd.DataFrame, 
    video_path_map: dict, 
    transcript_searcher, 
    evt: gr.SelectData
):
    """
    X·ª≠ l√Ω khi ch·ªçn m·ªôt d√≤ng trong DataFrame. C·∫≠p nh·∫≠t TO√ÄN B·ªò Tr·∫°m Ph√¢n t√≠ch.
    """
    if evt.value is None or results_state is None or results_state.empty:
        return None, None, "", "", "", None, "", ""

    try:
        selected_row = results_state.iloc[evt.index[0]]
        video_id = selected_row['video_id']
        timestamp = selected_row['timestamp']
        keyframe_path = selected_row['keyframe_path']
        
        video_path = video_path_map.get(video_id)
        if not video_path:
            gr.Error(f"Kh√¥ng t√¨m th·∫•y ƒë∆∞·ªùng d·∫´n cho video ID: {video_id}")
            return None, None, "", "", "", None, "", ""

        # L·∫•y to√†n b·ªô transcript cho video n√†y
        full_transcript = get_full_transcript_for_video(video_id, transcript_searcher)

        # T·∫°o clip 30 gi√¢y
        video_clip_path = create_video_segment(video_path, timestamp, duration=30)
        
        # T·∫°o link video g·ªëc
        full_video_link_html = generate_full_video_link(video_path)
        
        # T·∫°o m·ªôt dictionary ·ª©ng vi√™n gi·∫£ ƒë·ªÉ th√™m v√†o danh s√°ch n·ªôp b√†i
        # (V√¨ kh√¥ng c√≥ ƒëi·ªÉm s·ªë, ta ch·ªâ c·∫ßn th√¥ng tin c∆° b·∫£n)
        candidate_for_submission = {
            "keyframe_id": os.path.basename(keyframe_path).replace('.jpg', ''),
            "video_id": video_id,
            "timestamp": timestamp,
            "keyframe_path": keyframe_path,
            "final_score": 0.0, # ƒêi·ªÉm kh√¥ng x√°c ƒë·ªãnh
            "task_type": TaskType.KIS # M·∫∑c ƒë·ªãnh
        }
        selected_index = evt.index[0]
        return (
            keyframe_path,                      # selected_image_display
            gr.Video(value=video_clip_path, label=f"Clip 30s t·ª´ @ {timestamp:.2f}s"), # video_player
            full_transcript,                    # full_transcript_display
            "",                                 # analysis_display_html (Tr·ªëng v√¨ kh√¥ng c√≥ ƒëi·ªÉm)
            full_video_link_html,               # view_full_video_html
            candidate_for_submission,           # selected_candidate_for_submission
            video_id,                           # frame_calculator_video_id
            f"{timestamp:.2f}",                  # frame_calculator_time_input (d·∫°ng chu·ªói)
            selected_index  
        )
    except (IndexError, KeyError) as e:
        gr.Error(f"L·ªói khi x·ª≠ l√Ω l·ª±a ch·ªçn transcript: {e}")
        return None, None, "", "", "", None, "", "", None

def add_to_submission_list(submission_list: list, candidate: dict, response_state: dict, position: str):
    if not candidate:
        gr.Warning("Ch∆∞a c√≥ ·ª©ng vi√™n n√†o ƒë∆∞·ª£c ch·ªçn ƒë·ªÉ th√™m!")
        return submission_list, format_submission_list_to_csv_string(submission_list)
    task_type = response_state.get("task_type", TaskType.KIS)
    item_to_add = {**candidate, 'task_type': task_type}
    if len(submission_list) < MAX_SUBMISSION_RESULTS:
        if position == 'top': submission_list.insert(0, item_to_add)
        else: submission_list.append(item_to_add)
        gr.Success(f"ƒê√£ th√™m k·∫øt qu·∫£ v√†o {'ƒë·∫ßu' if position == 'top' else 'cu·ªëi'} danh s√°ch!")
    else:
        gr.Warning(f"Danh s√°ch ƒë√£ ƒë·∫°t gi·ªõi h·∫°n {MAX_SUBMISSION_RESULTS} k·∫øt qu·∫£.")
    return submission_list, format_submission_list_to_csv_string(submission_list)

def add_transcript_result_to_submission(
    submission_list: list, 
    results_state: pd.DataFrame, 
    selected_index: int, # <-- Nh·∫≠n v√†o CH·ªà S·ªê (int) ƒë√£ ƒë∆∞·ª£c l∆∞u trong State
    position: str
):
    """
    Tr√≠ch xu·∫•t th√¥ng tin t·ª´ d√≤ng DataFrame ƒë∆∞·ª£c ch·ªçn (d·ª±a tr√™n ch·ªâ s·ªë ƒë√£ l∆∞u)
    v√† th√™m v√†o danh s√°ch n·ªôp b√†i.
    """
    # --- L·ªöP B·∫¢O V·ªÜ C·ªêT L√ïI ---
    # Ki·ªÉm tra xem ng∆∞·ªùi d√πng ƒë√£ th·ª±c s·ª± ch·ªçn m·ªôt h√†ng n√†o ch∆∞a.
    # `selected_index` s·∫Ω l√† None n·∫øu ch∆∞a c√≥ l·ª±a ch·ªçn n√†o ƒë∆∞·ª£c th·ª±c hi·ªán.
    if selected_index is None or results_state is None or results_state.empty:
        gr.Warning("Vui l√≤ng CH·ªåN m·ªôt k·∫øt qu·∫£ t·ª´ b·∫£ng transcript tr∆∞·ªõc khi th√™m!")
        # Tr·∫£ v·ªÅ c√°c gi√° tr·ªã hi·ªán t·∫°i m√† kh√¥ng thay ƒë·ªïi g√¨
        return submission_list, format_submission_list_to_csv_string(submission_list)

    try:
        # S·ª≠ d·ª•ng ch·ªâ s·ªë ƒë√£ ƒë∆∞·ª£c l∆∞u trong state ƒë·ªÉ l·∫•y ƒë√∫ng h√†ng
        selected_row = results_state.iloc[selected_index]
        
        # T·∫°o m·ªôt dictionary "candidate" ƒë·ªÉ t√°i s·ª≠ d·ª•ng logic th√™m b√†i ƒë√£ c√≥
        candidate = {
            "video_id": selected_row['video_id'], 
            "timestamp": selected_row['timestamp'], 
            "keyframe_path": selected_row['keyframe_path'], # Th√™m c·∫£ path ƒë·ªÉ nh·∫•t qu√°n
            "keyframe_id": f"transcript_{selected_row['timestamp']:.2f}s" # T·∫°o ID gi·∫£ ƒë·ªÉ hi·ªÉn th·ªã
        }
        
        # G·ªçi h√†m add_to_submission_list chung ƒë·ªÉ x·ª≠ l√Ω vi·ªác th√™m v√† c·∫≠p nh·∫≠t giao di·ªán
        # Truy·ªÅn v√†o m·ªôt response_state gi·∫£ ƒë·ªãnh v√¨ h√†m n√†y c·∫ßn n√≥
        return add_to_submission_list(
            submission_list, 
            candidate, 
            {"task_type": TaskType.KIS}, # Gi·∫£ ƒë·ªãnh l√† t√°c v·ª• KIS
            position
        )
        
    except (IndexError, KeyError) as e:
        # X·ª≠ l√Ω tr∆∞·ªùng h·ª£p ch·ªâ s·ªë kh√¥ng h·ª£p l·ªá ho·∫∑c d·ªØ li·ªáu c√≥ v·∫•n ƒë·ªÅ
        gr.Error(f"L·ªói khi th√™m k·∫øt qu·∫£ transcript: Ch·ªâ s·ªë kh√¥ng h·ª£p l·ªá ho·∫∑c d·ªØ li·ªáu b·ªã l·ªói. L·ªói: {e}")
        return submission_list, format_submission_list_to_csv_string(submission_list)

def prepare_submission_for_edit(submission_list: list):
    gr.Info("ƒê√£ ƒë·ªìng b·ªô h√≥a danh s√°ch v√†o B·∫£ng ƒëi·ªÅu khi·ªÉn.")
    return format_submission_list_to_csv_string(submission_list)

def clear_submission_state_and_editor():
    gr.Info("ƒê√£ x√≥a danh s√°ch n·ªôp b√†i v√† n·ªôi dung trong b·∫£ng ƒëi·ªÅu khi·ªÉn.")
    return [], ""

def calculate_frame_number(video_id: str, time_input: str, fps_map: dict):
    if not video_id or not time_input: return "Vui l√≤ng nh·∫≠p Video ID v√† Th·ªùi gian."
    try:
        time_input_str = str(time_input).strip()
        match = re.match(r'(\d+)\s*:\s*(\d+(\.\d+)?)', time_input_str)
        if match:
            minutes, seconds = int(match.group(1)), float(match.group(2))
            timestamp = minutes * 60 + seconds
        else:
            timestamp = float(time_input_str)
        fps = fps_map.get(video_id, 30.0)
        return str(round(timestamp * fps))
    except Exception:
        return f"L·ªói: ƒê·ªãnh d·∫°ng th·ªùi gian '{time_input}' kh√¥ng h·ª£p l·ªá."

def handle_submission(submission_csv_text: str, query_id: str):
    if not submission_csv_text or not submission_csv_text.strip():
        gr.Warning("N·ªôi dung n·ªôp b√†i ƒëang tr·ªëng.")
        return None
    if not query_id.strip():
        gr.Warning("Vui l√≤ng nh·∫≠p Query ID.")
        return None
    try:
        # Check if text is valid CSV before writing
        pd.read_csv(StringIO(submission_csv_text), header=None)
        
        output_dir = "/kaggle/working/submissions"
        os.makedirs(output_dir, exist_ok=True)
        file_path = os.path.join(output_dir, f"{query_id}_submission.csv")
        with open(file_path, 'w', encoding='utf-8') as f:
            f.write(submission_csv_text.strip())
        
        gr.Success(f"ƒê√£ t·∫°o file n·ªôp b√†i th√†nh c√¥ng!")
        return file_path
    except Exception as e:
        gr.Error(f"L·ªói ƒë·ªãnh d·∫°ng CSV: {e}.")
        return None

def clear_all():
    analysis_clear_vals = clear_analysis_panel()
    transcript_clear_main_vals = ("", "", "", "T√¨m th·∫•y: 0 k·∫øt qu·∫£.", pd.DataFrame(), None)
    submission_clear_vals = ("", [])
    file_clear_vals = ("", None)
    return (
        [], "", None, "Trang 1 / 1", [], 1, # M·∫Øt Th·∫ßn
        *transcript_clear_main_vals,       # Tai Th√≠nh
        *analysis_clear_vals,              # Tr·∫°m Ph√¢n t√≠ch
        *submission_clear_vals,            # B·∫£ng ƒëi·ªÅu khi·ªÉn
        *file_clear_vals                   # Xu·∫•t File
    )