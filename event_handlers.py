from typing import Dict, List
import gradio as gr
import pandas as pd
import numpy as np
import time
import os
import traceback
import json
import re
from io import StringIO

# --- Local imports ---
from config import ITEMS_PER_PAGE, MAX_SUBMISSION_RESULTS, VIDEO_BASE_PATH, TRANSCRIPTS_JSON_DIR
from ui_helpers import create_detailed_info_html, format_submission_list_for_display
from search_core.task_analyzer import TaskType
from utils.formatting import (
    format_list_for_submission, 
    format_results_for_mute_gallery,
    format_submission_list_to_csv_string
)
from utils import create_video_segment, generate_submission_file

# ==============================================================================
# === G·ªåNG K√åM 1: HANDLERS CHO TAB "M·∫ÆT TH·∫¶N" (VISUAL SCOUT) ===
# ==============================================================================

def perform_search(
    query_text: str, num_results: int, w_clip: float, w_obj: float, 
    w_semantic: float, lambda_mmr: float,
    master_searcher
):
    """X·ª≠ l√Ω s·ª± ki·ªán t√¨m ki·∫øm ch√≠nh cho Tab Visual."""
    if not query_text.strip():
        gr.Warning("Vui l√≤ng nh·∫≠p truy v·∫•n t√¨m ki·∫øm!")
        return [], "<div style='color: orange;'>‚ö†Ô∏è Vui l√≤ng nh·∫≠p truy v·∫•n.</div>", None, "Trang 1 / 1", [], 1

    loading_html = "<div style='color: #4338ca;'>‚è≥ ƒêang qu√©t visual... AI ƒëang ph√¢n t√≠ch v√† t√¨m ki·∫øm.</div>"
    yield ([], loading_html, None, "Trang 1 / 1", [], 1)
    
    try:
        config = {
            "top_k_final": int(num_results), "w_clip": w_clip, "w_obj": w_obj, 
            "w_semantic": w_semantic, "lambda_mmr": lambda_mmr
        }
        start_time = time.time()
        full_response = master_searcher.search(query=query_text, config=config)
        search_time = time.time() - start_time
    except Exception as e:
        traceback.print_exc()
        return [], f"<div style='color: red;'>üî• L·ªói backend: {e}</div>", None, "Trang 1 / 1", [], 1

    gallery_paths = format_results_for_mute_gallery(full_response)
    num_found = len(gallery_paths)
    task_type_msg = full_response.get('task_type', TaskType.KIS).value
    
    if num_found == 0:
        status_msg = f"<div style='color: #d97706;'>üòî **{task_type_msg}** | Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£ n√†o ({search_time:.2f}s).</div>"
    else:
        status_msg = f"<div style='color: #166534;'>‚úÖ **{task_type_msg}** | T√¨m th·∫•y {num_found} k·∫øt qu·∫£ ({search_time:.2f}s).</div>"

    initial_gallery_view = gallery_paths[:ITEMS_PER_PAGE]
    total_pages = int(np.ceil(num_found / ITEMS_PER_PAGE)) or 1
    page_info = f"Trang 1 / {total_pages}"
    
    yield (initial_gallery_view, status_msg, full_response, page_info, gallery_paths, 1)

def update_gallery_page(gallery_items: List, current_page: int, direction: str):
    """C·∫≠p nh·∫≠t trang cho gallery visual."""
    if not gallery_items:
        return [], 1, "Trang 1 / 1"
    total_items = len(gallery_items)
    total_pages = int(np.ceil(total_items / ITEMS_PER_PAGE)) or 1
    new_page = min(total_pages, current_page + 1) if direction == "‚ñ∂Ô∏è Trang sau" else max(1, current_page - 1)
    start_index = (new_page - 1) * ITEMS_PER_PAGE
    end_index = start_index + ITEMS_PER_PAGE
    return gallery_items[start_index:end_index], new_page, f"Trang {new_page} / {total_pages}"

# ==============================================================================
# === G·ªåNG K√åM 2: HANDLERS CHO TAB "TAI TH√çNH" (TRANSCRIPT INTEL) ===
# ==============================================================================

def handle_transcript_search(query1: str, query2: str, query3: str, transcript_searcher):
    """X·ª≠ l√Ω s·ª± ki·ªán t√¨m ki·∫øm l·ªìng nhau tr√™n transcript."""
    gr.Info("B·∫Øt ƒë·∫ßu ƒëi·ªÅu tra transcript...")
    results = None
    if query1.strip():
        results = transcript_searcher.search(query1, current_results=results)
    if query2.strip():
        results = transcript_searcher.search(query2, current_results=results)
    if query3.strip():
        results = transcript_searcher.search(query3, current_results=results)

    if results is None:
        return "Nh·∫≠p truy v·∫•n ƒë·ªÉ b·∫Øt ƒë·∫ßu ƒëi·ªÅu tra.", pd.DataFrame(), None

    count_str = f"T√¨m th·∫•y: {len(results)} k·∫øt qu·∫£."
    display_df = results[['video_id', 'timestamp', 'transcript_text', 'keyframe_path']]
    return count_str, display_df, results

def clear_transcript_search():
    """X√≥a c√°c √¥ t√¨m ki·∫øm v√† k·∫øt qu·∫£ c·ªßa Tab Tai Th√≠nh."""
    return "", "", "", "T√¨m th·∫•y: 0 k·∫øt qu·∫£.", pd.DataFrame(columns=["Video ID", "Timestamp (s)", "N·ªôi dung L·ªùi tho·∫°i", "Keyframe Path"]), None, None, "", None

def on_transcript_select(results_state: pd.DataFrame, evt: gr.SelectData):
    """X·ª≠ l√Ω khi ng∆∞·ªùi d√πng ch·ªçn m·ªôt d√≤ng trong b·∫£ng k·∫øt qu·∫£ transcript."""
    empty_return = None, "Click v√†o m·ªôt d√≤ng k·∫øt qu·∫£ ƒë·ªÉ xem chi ti·∫øt.", None
    if evt.value is None or results_state is None or results_state.empty:
        return empty_return
    
    try:
        selected_row = results_state.iloc[evt.index[0]]
        video_id = selected_row['video_id']
        timestamp = selected_row['timestamp']
        keyframe_path = selected_row['keyframe_path']
        video_path = os.path.join(VIDEO_BASE_PATH, f"{video_id}.mp4")
        video_output = gr.Video.update(value=None)
        if os.path.exists(video_path):
            video_output = gr.Video(value=video_path, start_time=timestamp)
        else:
            gr.Warning(f"Kh√¥ng t√¨m th·∫•y file video: {video_path}")
        full_transcript_text = f"ƒêang t√¨m transcript cho video {video_id}..."
        transcript_json_path = os.path.join(TRANSCRIPTS_JSON_DIR, f"{video_id}.json")
        if os.path.exists(transcript_json_path):
            with open(transcript_json_path, 'r', encoding='utf-8') as f:
                data = json.load(f)
                full_transcript_text = data.get("text", "L·ªói: File JSON kh√¥ng ch·ª©a key 'text'.").strip()
        else:
            full_transcript_text = f"L·ªói: Kh√¥ng t√¨m th·∫•y file transcript t·∫°i: {transcript_json_path}"
        
        return video_output, full_transcript_text, keyframe_path
    except (IndexError, KeyError) as e:
        gr.Error(f"L·ªói khi x·ª≠ l√Ω l·ª±a ch·ªçn: {e}")
        return None, "C√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω l·ª±a ch·ªçn c·ªßa b·∫°n.", None

# ==============================================================================
# === HANDLERS D√ôNG CHUNG (PH√ÇN T√çCH, N·ªòP B√ÄI, C√îNG C·ª§) ===
# ==============================================================================

def on_gallery_select(response_state: Dict, current_page: int, evt: gr.SelectData):
    """X·ª≠ l√Ω khi click v√†o ·∫£nh trong gallery."""
    empty_return = None, None, "", None, "", "0.0", None
    if not response_state or evt is None: return empty_return

    results = response_state.get("results", [])
    global_index = (current_page - 1) * ITEMS_PER_PAGE + evt.index
    if not results or global_index >= len(results): return empty_return

    selected_result = results[global_index]
    video_path = selected_result.get('video_path')
    timestamp = selected_result.get('timestamp', 0.0)

    video_clip_path = create_video_segment(video_path, timestamp, duration=30)
    analysis_html = create_detailed_info_html(selected_result, response_state.get("task_type"))

    return (selected_result.get('keyframe_path'), video_clip_path, analysis_html,
            selected_result, selected_result.get('video_id'), str(timestamp), video_path)

def get_full_video_path_for_button(video_path):
    """Cung c·∫•p file video ƒë·ªÉ ng∆∞·ªùi d√πng t·∫£i/xem."""
    if video_path and os.path.exists(video_path):
        return video_path
    gr.Warning("Kh√¥ng t√¨m th·∫•y ƒë∆∞·ªùng d·∫´n video g·ªëc.")
    return None

def add_to_submission_list(submission_list: list, candidate: Dict, response_state: Dict, position: str):
    """Th√™m ·ª©ng vi√™n t·ª´ Visual Scout v√† c·∫≠p nh·∫≠t editor."""
    if not candidate:
        gr.Warning("Ch∆∞a c√≥ ·ª©ng vi√™n n√†o ƒë∆∞·ª£c ch·ªçn ƒë·ªÉ th√™m!")
        return submission_list, format_submission_list_to_csv_string(submission_list)
    task_type = response_state.get("task_type", TaskType.KIS)
    item_to_add = {**candidate, 'task_type': task_type}
    if len(submission_list) < MAX_SUBMISSION_RESULTS:
        if position == 'top': submission_list.insert(0, item_to_add)
        else: submission_list.append(item_to_add)
        gr.Success(f"ƒê√£ th√™m k·∫øt qu·∫£ v√†o {'ƒë·∫ßu' if position == 'top' else 'cu·ªëi'} danh s√°ch!")
    else:
        gr.Warning(f"Danh s√°ch ƒë√£ ƒë·∫°t gi·ªõi h·∫°n {MAX_SUBMISSION_RESULTS} k·∫øt qu·∫£.")
    return submission_list, format_submission_list_to_csv_string(submission_list)

def add_transcript_result_to_submission(
    submission_list: list, 
    results_state: pd.DataFrame, 
    selected_index: int, # <-- NH·∫¨N V√ÄO CH·ªà S·ªê T·ª™ STATE
    position: str
):
    """
    Th√™m k·∫øt qu·∫£ t·ª´ transcript v√†o danh s√°ch, s·ª≠ d·ª•ng ch·ªâ s·ªë ƒë√£ ƒë∆∞·ª£c l∆∞u.
    """
    if selected_index is None or results_state is None or results_state.empty:
        gr.Warning("Vui l√≤ng ch·ªçn m·ªôt k·∫øt qu·∫£ t·ª´ b·∫£ng transcript tr∆∞·ªõc khi th√™m!")
        return submission_list, format_submission_list_to_csv_string(submission_list)

    try:
        # S·ª≠ d·ª•ng ch·ªâ s·ªë ƒë√£ l∆∞u ƒë·ªÉ l·∫•y ƒë√∫ng h√†ng
        selected_row = results_state.iloc[selected_index]
        candidate = {
            "video_id": selected_row['video_id'], "timestamp": selected_row['timestamp'],
            "keyframe_id": f"transcript_{selected_row['timestamp']:.2f}s", "task_type": TaskType.KIS
        }
        return add_to_submission_list(submission_list, candidate, {"task_type": TaskType.KIS}, position)
    except (IndexError, KeyError) as e:
        gr.Error(f"L·ªói khi th√™m k·∫øt qu·∫£ transcript: {e}")
        return submission_list, format_submission_list_to_csv_string(submission_list)

def prepare_submission_for_edit(submission_list: list):
    """ƒê·ªìng b·ªô h√≥a state v√†o text editor."""
    gr.Info("ƒê√£ ƒë·ªìng b·ªô h√≥a danh s√°ch v√†o B·∫£ng ƒëi·ªÅu khi·ªÉn.")
    return format_submission_list_to_csv_string(submission_list)

def clear_submission_state_and_editor():
    """X√≥a state v√† text editor c·ªßa submission."""
    gr.Info("ƒê√£ x√≥a danh s√°ch n·ªôp b√†i v√† n·ªôi dung trong b·∫£ng ƒëi·ªÅu khi·ªÉn.")
    return [], ""

def calculate_frame_number(video_id: str, time_input: str, fps_map: dict):
    """T√≠nh to√°n frame index t·ª´ input gi√¢y ho·∫∑c ph√∫t:gi√¢y."""
    if not video_id or not time_input: return "Vui l√≤ng nh·∫≠p Video ID v√† Th·ªùi gian."
    try:
        time_input_str = str(time_input).strip()
        match = re.match(r'(\d+)\s*:\s*(\d+(\.\d+)?)', time_input_str)
        if match:
            minutes, seconds = int(match.group(1)), float(match.group(2))
            timestamp = minutes * 60 + seconds
            gr.Info(f"ƒê√£ chuy·ªÉn ƒë·ªïi '{time_input_str}' th√†nh {timestamp:.2f} gi√¢y.")
        else:
            timestamp = float(time_input_str)
        fps = fps_map.get(video_id, 30.0)
        return str(round(timestamp * fps))
    except (ValueError, TypeError):
        return f"L·ªói: ƒê·ªãnh d·∫°ng th·ªùi gian '{time_input}' kh√¥ng h·ª£p l·ªá."

def handle_submission(submission_csv_text: str, query_id: str):
    """T·∫°o file CSV n·ªôp b√†i t·ª´ n·ªôi dung text editor."""
    if not submission_csv_text or not submission_csv_text.strip():
        gr.Warning("N·ªôi dung n·ªôp b√†i ƒëang tr·ªëng.")
        return None
    if not query_id.strip():
        gr.Warning("Vui l√≤ng nh·∫≠p Query ID ƒë·ªÉ t·∫°o file.")
        return None
    try:
        pd.read_csv(StringIO(submission_csv_text), header=None)
        file_path = generate_submission_file(submission_csv_text, query_id=query_id)
        gr.Success(f"ƒê√£ t·∫°o file n·ªôp b√†i th√†nh c√¥ng t·ª´ n·ªôi dung ƒë√£ s·ª≠a!")
        return file_path
    except Exception as e:
        gr.Error(f"L·ªói ƒë·ªãnh d·∫°ng CSV: {e}. Vui l√≤ng ki·ªÉm tra l·∫°i n·ªôi dung trong B·∫£ng ƒëi·ªÅu khi·ªÉn.")
        return None

# ==============================================================================
# === HANDLER D·ªåN D·∫∏P TO√ÄN B·ªò H·ªÜ TH·ªêNG ===
# ==============================================================================

def clear_all():
    """Reset to√†n b·ªô giao di·ªán v·ªÅ tr·∫°ng th√°i ban ƒë·∫ßu."""
    return (
        # Tab M·∫Øt Th·∫ßn
        [], "", None, "Trang 1 / 1", [], 1,
        # Tab Tai Th√≠nh
        "", "", "", "T√¨m th·∫•y: 0 k·∫øt qu·∫£.", pd.DataFrame(columns=["Video ID", "Timestamp (s)", "N·ªôi dung L·ªùi tho·∫°i", "Keyframe Path"]), None, None, "", None,
        # Tr·∫°m Ph√¢n t√≠ch Visual
        None, None, "", None,
        # C√¥ng c·ª• t√≠nh to√°n
        "", "", "",
        # B·∫£ng ƒëi·ªÅu khi·ªÉn N·ªôp b√†i
        "", [],
        # V√πng Xu·∫•t File
        "", None,
    )

def generate_submission_file(submission_data, query_id: str, output_dir: str = "/kaggle/working/submissions") -> str:
    """Ghi d·ªØ li·ªáu (DataFrame ho·∫∑c string) ra file CSV."""
    os.makedirs(output_dir, exist_ok=True)
    file_path = os.path.join(output_dir, f"{query_id}_submission.csv")
    if isinstance(submission_data, str):
        with open(file_path, 'w', encoding='utf-8') as f:
            f.write(submission_data.strip())
    elif isinstance(submission_data, pd.DataFrame):
        submission_data.to_csv(file_path, header=False, index=False)
    else:
        raise TypeError("D·ªØ li·ªáu n·ªôp b√†i ph·∫£i l√† DataFrame ho·∫∑c chu·ªói CSV.")
    return file_path