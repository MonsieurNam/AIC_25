from search_core.task_analyzer import TaskType
import pandas as pd
from typing import List, Dict, Any
import os
import json # <-- TH√äM M·ªöI

def format_submission_list_to_csv_string(submission_list: List[Dict]) -> str:
    """
    Chuy·ªÉn danh s√°ch n·ªôp b√†i th√†nh m·ªôt chu·ªói CSV ƒë·ªÉ hi·ªÉn th·ªã v√† ch·ªânh s·ª≠a.
    """
    if not submission_list:
        return "" # Tr·∫£ v·ªÅ chu·ªói r·ªóng n·∫øu kh√¥ng c√≥ g√¨
    
    # T√°i s·ª≠ d·ª•ng logic ƒë·ªãnh d·∫°ng ƒë√£ c√≥ ƒë·ªÉ t·∫°o DataFrame
    df = format_list_for_submission(submission_list)
    
    if df.empty:
        return ""
        
    # Chuy·ªÉn DataFrame th√†nh chu·ªói CSV, kh√¥ng c√≥ header v√† index
    csv_string = df.to_csv(header=False, index=False)
    return csv_string

def _load_fps_map(path="/kaggle/input/stage1/video_fps_map.json") -> Dict[str, float]:
    """
    T·∫£i v√† cache b·∫£n ƒë·ªì FPS. Ch·ªâ ƒë∆∞·ª£c g·ªçi m·ªôt l·∫ßn.
    """
    if not os.path.exists(path):
        print(f"--- ‚ö†Ô∏è C·∫¢NH B√ÅO N·ªòP B√ÄI: Kh√¥ng t√¨m th·∫•y file '{path}'. S·∫Ω d√πng FPS m·∫∑c ƒë·ªãnh l√† 30.0 ---")
        return {}
    try:
        with open(path, 'r') as f:
            fps_map = json.load(f)
            print(f"--- ‚úÖ T·∫£i th√†nh c√¥ng b·∫£n ƒë·ªì FPS cho {len(fps_map)} video. ---")
            return fps_map
    except Exception as e:
        print(f"--- ‚ùå L·ªñI N·ªòP B√ÄI: Kh√¥ng th·ªÉ ƒë·ªçc file FPS map. L·ªói: {e}. S·∫Ω d√πng FPS m·∫∑c ƒë·ªãnh l√† 30.0 ---")
        return {}

# T·∫£i map FPS ngay khi module ƒë∆∞·ª£c import, ch·ªâ ch·∫°y 1 l·∫ßn duy nh·∫•t
FPS_MAP = _load_fps_map()
DEFAULT_FPS = 30.0

def format_results_for_gallery(response: Dict[str, Any]) -> List[str]:
    """
    ƒê·ªãnh d·∫°ng k·∫øt qu·∫£ th√¥ th√†nh ƒë·ªãnh d·∫°ng cho gr.Gallery (ch·ªâ tr·∫£ v·ªÅ ƒë∆∞·ªùng d·∫´n ·∫£nh).
    PHI√äN B·∫¢N "COCKPIT V3.3"
    """
    results = response.get("results", [])
    task_type = response.get("task_type")
    
    # Logic m·ªõi: Ch·ªâ tr·∫£ v·ªÅ ƒë∆∞·ªùng d·∫´n ·∫£nh ƒë·ªÉ UI load nhanh
    gallery_paths = []
    if not results:
        return []

    for res in results:
        keyframe_path = None
        # ƒê·ªëi v·ªõi TRAKE, l·∫•y ·∫£nh ƒë·∫°i di·ªán l√† frame ƒë·∫ßu ti√™n c·ªßa chu·ªói
        if task_type == TaskType.TRAKE:
            sequence = res.get('sequence', [])
            if sequence:
                keyframe_path = sequence[0].get('keyframe_path')
        # ƒê·ªëi v·ªõi KIS v√† QNA, l·∫•y tr·ª±c ti·∫øp
        else:
            keyframe_path = res.get('keyframe_path')

        if keyframe_path and os.path.isfile(keyframe_path):
            gallery_paths.append(keyframe_path)
            
    return gallery_paths

def format_results_for_mute_gallery(response: Dict[str, Any]) -> List[str]:
    """
    ƒê·ªãnh d·∫°ng k·∫øt qu·∫£ th√¥ CH·ªà L·∫§Y ƒê∆Ø·ªúNG D·∫™N ·∫¢NH cho "L∆∞·ªõi ·∫£nh c√¢m" (Cockpit v3.3).
    """
    # ==============================================================================
    # === DEBUG LOG: KI·ªÇM TRA INPUT ==============================================
    # ==============================================================================
    print("\n" + "="*20 + " DEBUG LOG: format_results_for_mute_gallery " + "="*20)
    print(f"-> Nh·∫≠n ƒë∆∞·ª£c response v·ªõi c√°c key: {response.keys() if isinstance(response, dict) else 'Kh√¥ng ph·∫£i dict'}")
    results = response.get("results", [])
    task_type = response.get("task_type")
    print(f"-> Task Type: {task_type}")
    print(f"-> S·ªë l∆∞·ª£ng 'results' nh·∫≠n ƒë∆∞·ª£c: {len(results)}")
    if results:
        print(f"-> C·∫•u tr√∫c c·ªßa result ƒë·∫ßu ti√™n: {results[0].keys() if isinstance(results[0], dict) else 'Kh√¥ng ph·∫£i dict'}")
        # Ki·ªÉm tra s·ª± t·ªìn t·∫°i c·ªßa key 'keyframe_path'
        if 'keyframe_path' in results[0]:
             print(f"  -> Key 'keyframe_path' t·ªìn t·∫°i. Gi√° tr·ªã: {results[0]['keyframe_path']}")
        else:
             print("  -> üö® C·∫¢NH B√ÅO: Key 'keyframe_path' KH√îNG T·ªíN T·∫†I trong result ƒë·∫ßu ti√™n!")
    print("="*75 + "\n")
    # ==============================================================================

    if not results:
        return []
        
    task_type = response.get("task_type")
    
    keyframe_paths = []

    # V·ªõi TRAKE, m·ªói k·∫øt qu·∫£ l√† m·ªôt chu·ªói. ·∫¢nh ƒë·∫°i di·ªán l√† frame ƒê·∫¶U TI√äN c·ªßa chu·ªói.
    if task_type == TaskType.TRAKE:
        for sequence_result in results:
            sequence = sequence_result.get('sequence', [])
            if sequence: # ƒê·∫£m b·∫£o chu·ªói kh√¥ng r·ªóng
                first_frame = sequence[0]
                path = first_frame.get('keyframe_path')
                if path and os.path.isfile(path):
                    keyframe_paths.append(path)
    
    # V·ªõi KIS v√† QNA, m·ªói k·∫øt qu·∫£ l√† m·ªôt frame ƒë∆°n l·∫ª.
    else: # Bao g·ªìm KIS, QNA
        for single_frame_result in results:
            path = single_frame_result.get('keyframe_path')
            if path and os.path.isfile(path):
                keyframe_paths.append(path)

    return keyframe_paths

def format_for_submission(response: Dict[str, Any], max_results: int = 100) -> pd.DataFrame:
    """
    ƒê·ªãnh d·∫°ng k·∫øt qu·∫£ th√¥ th√†nh m·ªôt DataFrame s·∫µn s√†ng ƒë·ªÉ l∆∞u ra file CSV n·ªôp b√†i.

    Args:
        response (Dict[str, Any]): Dictionary k·∫øt qu·∫£ tr·∫£ v·ªÅ t·ª´ MasterSearcher.search().
        max_results (int): S·ªë l∆∞·ª£ng d√≤ng t·ªëi ƒëa trong file n·ªôp b√†i.

    Returns:
        pd.DataFrame: DataFrame c√≥ c√°c c·ªôt ph√π h·ª£p v·ªõi y√™u c·∫ßu c·ªßa ban t·ªï ch·ª©c.
    """
    task_type = response.get("task_type")
    results = response.get("results", [])
        
    submission_data = []

    if task_type == TaskType.KIS:
        for res in results:
            try:
                frame_index = int(res.get('keyframe_id', '').split('_')[-1])
                submission_data.append({
                    'video_id': res.get('video_id'),
                    'frame_index': frame_index
                })
            except (ValueError, IndexError):
                continue

    elif task_type == TaskType.QNA:
        for res in results:
            try:
                frame_index = int(res.get('keyframe_id', '').split('_')[-1])
                submission_data.append({
                    'video_id': res.get('video_id'),
                    'frame_index': frame_index,
                    'answer': res.get('answer', '')
                })
            except (ValueError, IndexError):
                continue
    
    elif task_type == TaskType.TRAKE:
        for seq_res in results:
            sequence = seq_res.get('sequence', [])
            if not sequence:
                continue
            
            row = {'video_id': seq_res.get('video_id')}
            for i, frame in enumerate(sequence):
                try:
                    frame_index = int(frame.get('keyframe_id', '').split('_')[-1])
                    row[f'frame_moment_{i+1}'] = frame_index
                except (ValueError, IndexError):
                    row[f'frame_moment_{i+1}'] = -1 
            submission_data.append(row)

    if not submission_data:
        return pd.DataFrame() # Tr·∫£ v·ªÅ DF r·ªóng n·∫øu kh√¥ng c√≥ k·∫øt qu·∫£

    df = pd.DataFrame(submission_data)
    
    return df.head(max_results)

def generate_submission_file(df: pd.DataFrame, query_id: str, output_dir: str = "/kaggle/working/submissions") -> str:
    """
    L∆∞u DataFrame th√†nh file CSV theo ƒë√∫ng ƒë·ªãnh d·∫°ng t√™n file.

    Args:
        df (pd.DataFrame): DataFrame ƒë√£ ƒë∆∞·ª£c ƒë·ªãnh d·∫°ng ƒë·ªÉ n·ªôp b√†i.
        query_id (str): ID c·ªßa c√¢u truy v·∫•n (v√≠ d·ª•: 'query_01').
        output_dir (str): Th∆∞ m·ª•c ƒë·ªÉ l∆∞u file.

    Returns:
        str: ƒê∆∞·ªùng d·∫´n ƒë·∫øn file CSV ƒë√£ ƒë∆∞·ª£c t·∫°o.
    """
    if df.empty:
        return "Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ t·∫°o file."

    os.makedirs(output_dir, exist_ok=True)
    file_path = os.path.join(output_dir, f"{query_id}.csv")
    
    df.to_csv(file_path, header=False, index=False)
    
    print(f"--- ‚úÖ ƒê√£ t·∫°o file n·ªôp b√†i t·∫°i: {file_path} ---")
    return file_path

def format_list_for_submission(submission_list: List[Dict], max_results: int = 100) -> pd.DataFrame:
    """
    ƒê·ªãnh d·∫°ng m·ªôt danh s√°ch c√°c dictionary k·∫øt qu·∫£ th√†nh DataFrame ƒë·ªÉ n·ªôp b√†i.
    PHI√äN B·∫¢N V2: T√≠nh to√°n s·ªë th·ª© t·ª± frame ch√≠nh x√°c b·∫±ng FPS_MAP.
    """
    if not submission_list:
        return pd.DataFrame()
        
    submission_data = []
    task_type = submission_list[0].get('task_type')
    
    # --- X·ª¨ L√ù KIS & QNA ---
    if task_type in [TaskType.KIS, TaskType.QNA]:
        for res in submission_list:
            video_id = res.get('video_id')
            timestamp = res.get('timestamp')
            
            if video_id is None or timestamp is None:
                continue

            # --- LOGIC T√çNH TO√ÅN C·ªêT L√ïI ---
            fps = FPS_MAP.get(video_id, DEFAULT_FPS)
            frame_number = round(timestamp * fps)
            # --- K·∫æT TH√öC LOGIC C·ªêT L√ïI ---
            
            row = {'video_id': video_id, 'frame_number': frame_number}
            if task_type == TaskType.QNA:
                row['answer'] = res.get('answer', '')
            
            submission_data.append(row)

    # --- X·ª¨ L√ù TRAKE ---
    elif task_type == TaskType.TRAKE:
        for seq_res in submission_list:
            video_id = seq_res.get('video_id')
            sequence = seq_res.get('sequence', [])
            if not video_id or not sequence:
                continue
            
            fps = FPS_MAP.get(video_id, DEFAULT_FPS)
            row = {'video_id': video_id}
            
            for i, frame in enumerate(sequence):
                timestamp = frame.get('timestamp')
                if timestamp is not None:
                    frame_number = round(timestamp * fps)
                    row[f'frame_moment_{i+1}'] = frame_number
                else:
                    row[f'frame_moment_{i+1}'] = -1 # Gi√° tr·ªã l·ªói
            submission_data.append(row)

    if not submission_data:
        return pd.DataFrame()

    df = pd.DataFrame(submission_data)
    if 'frame_number' in df.columns:
        df.rename(columns={'frame_number': 'frame_index'}, inplace=True)
        
    return df.head(max_results)