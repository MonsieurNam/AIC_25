# /search_core/query_decomposer.py

import json
import re
from typing import List, TYPE_CHECKING

# S·ª≠ d·ª•ng TYPE_CHECKING ƒë·ªÉ tr√°nh l·ªói circular import, m·ªôt k·ªπ thu·∫≠t r·∫•t h·ªØu √≠ch trong c√°c d·ª± √°n l·ªõn.
if TYPE_CHECKING:
    from .gemini_text_handler import GeminiTextHandler

# ==============================================================================
# === PROMPT V√ÄNG (THE GOLDEN PROMPT) - TR√ÅI TIM C·ª¶A B·ªò N√ÉO ===
# ==============================================================================
# Prompt n√†y ƒë∆∞·ª£c thi·∫øt k·∫ø c·ª±c k·ª≥ c·∫©n th·∫≠n ƒë·ªÉ "√©p" Gemini suy nghƒ© theo ƒë√∫ng
# ƒë·ªãnh h∆∞·ªõng "Co-pilot" c·ªßa ch√∫ng ta: ph√¢n r√£ th√†nh c√°c y·∫øu t·ªë visual ƒë∆°n gi·∫£n.
SYSTEM_PROMPT = """
B·∫°n l√† m·ªôt chuy√™n gia ph√¢n t√≠ch truy v·∫•n cho h·ªá th·ªëng t√¨m ki·∫øm video. Nhi·ªám v·ª• c·ªßa b·∫°n l√† PH√ÇN R√É m·ªôt truy v·∫•n ph·ª©c t·∫°p c·ªßa ng∆∞·ªùi d√πng th√†nh m·ªôt danh s√°ch c√°c M√î T·∫¢ H√åNH ·∫¢NH (visual description) ƒë∆°n gi·∫£n, ƒë·ªôc l·∫≠p v√† c√≥ th·ªÉ t√¨m ki·∫øm ƒë∆∞·ª£c.

**QUY T·∫ÆC B·∫ÆT BU·ªòC:**
1.  **KH√îNG Di·ªÖn gi·∫£i:** Lo·∫°i b·ªè ho√†n to√†n c√°c kh√°i ni·ªám tr·ª´u t∆∞·ª£ng, c·∫£m x√∫c, √Ω ƒë·ªãnh (v√≠ d·ª•: 'ƒë·∫πp', 'lung linh', 'quy·∫øt t√¢m', 'th·ªëng k√™ cho t√°c d·ª•ng ph·ª•').
2.  **KH√îNG ƒê·ªçc Ch·ªØ (OCR):** N·∫øu truy v·∫•n ch·ª©a vƒÉn b·∫£n ho·∫∑c s·ªë (v√≠ d·ª•: '9.00‚Ç¨', 'Happy New Year', '5,8%'), h√£y m√¥ t·∫£ v·∫≠t th·ªÉ ch·ª©a vƒÉn b·∫£n ƒë√≥ (v√≠ d·ª•: 'b·∫£ng gi√°', 'chi·∫øc k√≠nh', 'bi·ªÉu ƒë·ªì').
3.  **KH√îNG ƒê·∫øm Ch√≠nh x√°c:** Chuy·ªÉn c√°c y√™u c·∫ßu ƒë·∫øm (v√≠ d·ª•: 'h√†ng trƒÉm ng·ªçn n·∫øn', '12 c√°i b√°nh') th√†nh c√°c m√¥ t·∫£ ƒë·ªãnh t√≠nh (v√≠ d·ª•: 'nhi·ªÅu ng·ªçn n·∫øn', 'b√°nh ng·ªçt x·∫øp tr√™n khay').
4.  **T·∫¨P TRUNG v√†o Danh t·ª´ & T√≠nh t·ª´ C·ªët l√µi:** Ch·ªâ gi·ªØ l·∫°i c√°c ƒë·ªëi t∆∞·ª£ng, m√†u s·∫Øc, h√¨nh d·∫°ng, v√† h√†nh ƒë·ªông ƒë∆°n gi·∫£n c√≥ th·ªÉ nh√¨n th·∫•y ƒë∆∞·ª£c.
5.  **ƒê·ªòC L·∫¨P:** M·ªói m√¥ t·∫£ trong danh s√°ch tr·∫£ v·ªÅ ph·∫£i c√≥ th·ªÉ ƒë∆∞·ª£c t√¨m ki·∫øm m·ªôt c√°ch ƒë·ªôc l·∫≠p.

**ƒê·ªäNH D·∫†NG TR·∫¢ V·ªÄ:** Ch·ªâ tr·∫£ v·ªÅ m·ªôt m·∫£ng JSON ch·ª©a c√°c chu·ªói m√¥ t·∫£. KH√îNG th√™m b·∫•t k·ª≥ gi·∫£i th√≠ch n√†o kh√°c.

---
**V√ç D·ª§ 1:**
Query: "ƒêo·∫°n clip m·ªü ƒë·∫ßu v·ªõi c·∫£nh ƒë√†i phun n∆∞·ªõc ƒë∆∞·ª£c bao quanh b·ªüi h√†ng trƒÉm ng·ªçn n·∫øn x·∫øp ngay ng·∫Øn, t·∫°o n√™n khung c·∫£nh lung linh gi·ªØa ƒë√°m ƒë√¥ng."
JSON:
[
    "ƒë√†i phun n∆∞·ªõc v√†o ban ƒë√™m",
    "nhi·ªÅu ng·ªçn n·∫øn ƒë∆∞·ª£c th·∫Øp s√°ng",
    "ƒë√°m ƒë√¥ng ng∆∞·ªùi t·ª• t·∫≠p"
]

**V√ç D·ª§ 2:**
Query: "H√¨nh ·∫£nh nh·ªØng chi·∫øc b√°nh c√≥ 2 m·ª©c gi√° ƒë∆∞·ª£c vi·∫øt m·∫´u gi·∫•y ƒëen nh·ªè l·∫ßn l∆∞·ª£t l√† 9.00‚Ç¨ v√† 4‚Ç¨.80."
JSON:
[
    "b√°nh ng·ªçt tr∆∞ng b√†y trong t·ªß k√≠nh",
    "b·∫£ng gi√° nh·ªè m√†u ƒëen"
]

**V√ç D·ª§ 3:**
Query: "C·∫£nh ph·ªèng v·∫•n t·ªïng th·ªëng Donald Trump, ƒë·∫±ng sau √¥ng l√† c√°c b·ª©c h√¨nh v√† nh·ªØng l√° c·ªù. Sau ƒë√≥ l√† c·∫£nh m·ªôt ƒëo√†n ng∆∞·ªùi ƒëang di chuy·ªÉn tr√™n ƒë∆∞·ªùng d·ªçc theo m·ªôt b·ªù bi·ªÉn."
JSON:
[
    "t·ªïng th·ªëng Donald Trump ƒëang ƒë∆∞·ª£c ph·ªèng v·∫•n",
    "l√° c·ªù M·ªπ ph√≠a sau",
    "ƒëo√†n ng∆∞·ªùi di·ªÖu h√†nh g·∫ßn b·ªù bi·ªÉn"
]
---

B√¢y gi·ªù, h√£y ph√¢n r√£ truy v·∫•n sau:
"""

class QueryDecomposer:
    """
    "B·ªô n√£o" m·ªõi c·ªßa h·ªá th·ªëng, ch·ªãu tr√°ch nhi·ªám ph√¢n r√£ m·ªôt truy v·∫•n ph·ª©c t·∫°p
    th√†nh nhi·ªÅu truy v·∫•n con ƒë∆°n gi·∫£n, t·∫≠p trung v√†o c√°c y·∫øu t·ªë h√¨nh ·∫£nh.
    """
    def __init__(self, gemini_handler: 'GeminiTextHandler'):
        """
        Kh·ªüi t·∫°o b·ªô ph√¢n r√£ v·ªõi m·ªôt Gemini handler ƒë√£ ƒë∆∞·ª£c c·∫•u h√¨nh.
        """
        print("--- üß† Kh·ªüi t·∫°o Query Decomposer (B·ªô n√£o Chi·∫øn d·ªãch PHOENIX REBORN) ---")
        self.gemini_handler = gemini_handler

    def decompose(self, query: str) -> List[str]:
        """
        Ph√¢n r√£ truy v·∫•n ch√≠nh.

        Args:
            query (str): Truy v·∫•n g·ªëc t·ª´ ng∆∞·ªùi d√πng.

        Returns:
            List[str]: M·ªôt danh s√°ch c√°c truy v·∫•n con ƒë√£ ƒë∆∞·ª£c ƒë∆°n gi·∫£n h√≥a.
                       N·∫øu c√≥ l·ªói x·∫£y ra, s·∫Ω tr·∫£ v·ªÅ m·ªôt danh s√°ch ch·ªâ ch·ª©a truy v·∫•n g·ªëc.
        """
        # --- B∆∞·ªõc 1: Ki·ªÉm tra ƒë·∫ßu v√†o ---
        if not self.gemini_handler or not query or not query.strip():
            # N·∫øu kh√¥ng c√≥ handler ho·∫∑c query r·ªóng, tr·∫£ v·ªÅ ch√≠nh n√≥ ƒë·ªÉ h·ªá th·ªëng kh√¥ng b·ªã l·ªói
            return [query] if query and query.strip() else []

        print(f"   -> [Decomposer] B·∫Øt ƒë·∫ßu ph√¢n r√£ truy v·∫•n: '{query}'")
        
        # --- B∆∞·ªõc 2: G·ªçi API Gemini v·ªõi c∆° ch·∫ø retry ƒë√£ c√≥ ---
        try:
            user_prompt = f"Query: \"{query}\""
            # T·∫≠n d·ª•ng l·∫°i h√†m g·ªçi API ƒë√£ c√≥ s·∫µn retry t·ª´ GeminiTextHandler
            response = self.gemini_handler._gemini_api_call([SYSTEM_PROMPT, user_prompt])
            raw_text = response.text.strip()
            
            # --- B∆∞·ªõc 3: X·ª≠ l√Ω response m·ªôt c√°ch an to√†n ---
            # Gemini ƒë√¥i khi tr·∫£ v·ªÅ trong kh·ªëi markdown, c·∫ßn tr√≠ch xu·∫•t JSON t·ª´ ƒë√≥
            match = re.search(r'\[.*\]', raw_text, re.DOTALL)
            if not match:
                print(f"   -> ‚ö†Ô∏è [Decomposer] Gemini kh√¥ng tr·∫£ v·ªÅ m·∫£ng JSON h·ª£p l·ªá. Fallback. Raw response: {raw_text}")
                return [query]
            
            try:
                sub_queries = json.loads(match.group(0))
                if isinstance(sub_queries, list) and all(isinstance(i, str) for i in sub_queries):
                    print(f"   -> ‚úÖ [Decomposer] Ph√¢n r√£ th√†nh c√¥ng: {sub_queries}")
                    return sub_queries
                else:
                    print(f"   -> ‚ö†Ô∏è [Decomposer] JSON tr·∫£ v·ªÅ kh√¥ng ph·∫£i l√† m·ªôt danh s√°ch chu·ªói. Fallback.")
                    return [query]
            except json.JSONDecodeError:
                print(f"   -> ‚ö†Ô∏è [Decomposer] L·ªói gi·∫£i m√£ JSON. Fallback. Raw match: {match.group(0)}")
                return [query]

        except Exception as e:
            print(f"--- ‚ùå [Decomposer] L·ªói nghi√™m tr·ªçng khi g·ªçi API Gemini: {e}. S·ª≠ d·ª•ng fallback. ---")
            # Fallback t·ªëi quan tr·ªçng: n·∫øu c√≥ b·∫•t k·ª≥ l·ªói g√¨, h·ªá th·ªëng v·∫´n ch·∫°y ƒë∆∞·ª£c
            # b·∫±ng c√°ch s·ª≠ d·ª•ng ch√≠nh truy v·∫•n g·ªëc.
            return [query]