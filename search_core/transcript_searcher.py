import pandas as pd
import os
from typing import Optional

class TranscriptSearcher:
    """
    M·ªôt c√¥ng c·ª• t√¨m ki·∫øm chuy√™n d·ª•ng, hi·ªáu nƒÉng cao tr√™n d·ªØ li·ªáu transcript.
    N√≥ t·∫£i tr∆∞·ªõc to√†n b·ªô d·ªØ li·ªáu v√†o b·ªô nh·ªõ ƒë·ªÉ th·ª±c hi·ªán c√°c thao t√°c
    l·ªçc v√† t√¨m ki·∫øm l·ªìng nhau m·ªôt c√°ch g·∫ßn nh∆∞ t·ª©c th·ªùi.
    """
    def __init__(self, metadata_path: str):
        """
        Kh·ªüi t·∫°o TranscriptSearcher b·∫±ng c√°ch t·∫£i v√† chu·∫©n b·ªã d·ªØ li·ªáu.
        PHI√äN B·∫¢N N√ÇNG C·∫§P: T·ª± ƒë·ªông l√†m s·∫°ch (strip) d·ªØ li·ªáu transcript.

        Args:
            metadata_path (str): ƒê∆∞·ªùng d·∫´n ƒë·∫øn file rerank_metadata_v6.parquet.
        """
        print("--- üß† Kh·ªüi t·∫°o Transcript Searcher (ƒê·ªông c∆° 'Tai Th√≠nh')... ---")
        self.full_data: Optional[pd.DataFrame] = None
        
        try:
            if not os.path.exists(metadata_path):
                raise FileNotFoundError(f"File metadata kh√¥ng t·ªìn t·∫°i t·∫°i: {metadata_path}")
            
            # T·∫£i to√†n b·ªô d·ªØ li·ªáu, nh∆∞ng ch·ªâ gi·ªØ l·∫°i c√°c c·ªôt c·∫ßn thi·∫øt ƒë·ªÉ ti·∫øt ki·ªám RAM
            cols_to_load = [
                'video_id', 'timestamp', 'transcript_text', 'keyframe_path'
            ]
            
            print(f"-> ƒêang t·∫£i d·ªØ li·ªáu transcript t·ª´ {metadata_path}...")
            self.full_data = pd.read_parquet(metadata_path, columns=cols_to_load)
            
            # ==================================================================
            # === B∆Ø·ªöC 1: TINH CH·ªàNH L√ÄM S·∫†CH D·ªÆ LI·ªÜU ---
            # ==================================================================
            print("-> ƒêang l√†m s·∫°ch (strip) v√† l·ªçc d·ªØ li·ªáu transcript...")
            
            # 1. Lo·∫°i b·ªè kho·∫£ng tr·∫Øng th·ª´a ·ªü ƒë·∫ßu v√† cu·ªëi chu·ªói
            self.full_data['transcript_text'] = self.full_data['transcript_text'].str.strip()
            
            # 2. Lo·∫°i b·ªè c√°c d√≤ng kh√¥ng c√≥ transcript ƒë·ªÉ t·ªëi ∆∞u h√≥a t√¨m ki·∫øm
            #    S·ª≠ d·ª•ng dropna ƒë·ªÉ x·ª≠ l√Ω c√°c gi√° tr·ªã None/NaN m·ªôt c√°ch an to√†n
            self.full_data.dropna(subset=['transcript_text'], inplace=True)
            #    Sau ƒë√≥ l·ªçc b·ªè c√°c chu·ªói r·ªóng
            self.full_data = self.full_data[self.full_data['transcript_text'] != ''].copy()
            # ==================================================================
            
            # Reset index ƒë·ªÉ c√°c thao t√°c l·ªçc sau n√†y (d·ª±a tr√™n iloc) ƒë∆∞·ª£c ch√≠nh x√°c
            self.full_data.reset_index(drop=True, inplace=True)
            
            print(f"--- ‚úÖ Transcript Searcher ƒë√£ n·∫°p v√† chu·∫©n b·ªã {len(self.full_data)} d√≤ng transcript s·∫°ch. S·∫µn s√†ng ho·∫°t ƒë·ªông! ---")

        except Exception as e:
            print(f"--- ‚ùå L·ªñI NGHI√äM TR·ªåNG khi kh·ªüi t·∫°o TranscriptSearcher: {e} ---")
            
    def search(self, search_term: str, current_results: Optional[pd.DataFrame] = None) -> pd.DataFrame:
        """
        Th·ª±c hi·ªán t√¨m ki·∫øm tr√™n transcript. (Logic kh√¥ng thay ƒë·ªïi)
        """
        if self.full_data is None:
            print("--- ‚ö†Ô∏è TranscriptSearcher ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o th√†nh c√¥ng. B·ªè qua t√¨m ki·∫øm. ---")
            return pd.DataFrame()
        
        if not search_term or not search_term.strip():
            return current_results if current_results is not None else self.full_data

        source_df = self.full_data if current_results is None else current_results
        
        filtered_df = source_df[
            source_df['transcript_text'].str.contains(search_term, case=False, na=False)
        ].copy()
        
        return filtered_df