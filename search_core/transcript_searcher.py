import pandas as pd
import os
from typing import Optional

class TranscriptSearcher:
    """
    M·ªôt c√¥ng c·ª• t√¨m ki·∫øm chuy√™n d·ª•ng, hi·ªáu nƒÉng cao tr√™n d·ªØ li·ªáu transcript.
    N√≥ t·∫£i tr∆∞·ªõc to√†n b·ªô d·ªØ li·ªáu v√†o b·ªô nh·ªõ ƒë·ªÉ th·ª±c hi·ªán c√°c thao t√°c
    l·ªçc v√† t√¨m ki·∫øm l·ªìng nhau m·ªôt c√°ch g·∫ßn nh∆∞ t·ª©c th·ªùi.
    """
    def __init__(self, metadata_path: str):
        """
        Kh·ªüi t·∫°o TranscriptSearcher b·∫±ng c√°ch t·∫£i v√† chu·∫©n b·ªã d·ªØ li·ªáu.

        Args:
            metadata_path (str): ƒê∆∞·ªùng d·∫´n ƒë·∫øn file rerank_metadata_v6.parquet.
        """
        print("--- üß† Kh·ªüi t·∫°o Transcript Searcher (ƒê·ªông c∆° 'Tai Th√≠nh')... ---")
        self.full_data: Optional[pd.DataFrame] = None
        
        try:
            if not os.path.exists(metadata_path):
                raise FileNotFoundError(f"File metadata kh√¥ng t·ªìn t·∫°i t·∫°i: {metadata_path}")
            
            # T·∫£i to√†n b·ªô d·ªØ li·ªáu, nh∆∞ng ch·ªâ gi·ªØ l·∫°i c√°c c·ªôt c·∫ßn thi·∫øt ƒë·ªÉ ti·∫øt ki·ªám RAM
            all_columns = pd.read_parquet(metadata_path, columns=['keyframe_id']) # ƒê·ªçc nhanh 1 c·ªôt ƒë·ªÉ l·∫•y list
            cols_to_load = [
                'video_id', 'timestamp', 'transcript_text', 'keyframe_path'
            ]
            
            print(f"-> ƒêang t·∫£i d·ªØ li·ªáu transcript t·ª´ {metadata_path}...")
            self.full_data = pd.read_parquet(metadata_path, columns=cols_to_load)
            
            # Lo·∫°i b·ªè c√°c d√≤ng kh√¥ng c√≥ transcript ƒë·ªÉ t·ªëi ∆∞u t√¨m ki·∫øm
            self.full_data = self.full_data[self.full_data['transcript_text'] != ''].copy()
            
            # Reset index ƒë·ªÉ thao t√°c d·ªÖ d√†ng h∆°n
            self.full_data.reset_index(drop=True, inplace=True)
            
            print(f"--- ‚úÖ Transcript Searcher ƒë√£ n·∫°p v√† chu·∫©n b·ªã {len(self.full_data)} d√≤ng transcript. S·∫µn s√†ng ho·∫°t ƒë·ªông! ---")

        except Exception as e:
            print(f"--- ‚ùå L·ªñI NGHI√äM TR·ªåNG khi kh·ªüi t·∫°o TranscriptSearcher: {e} ---")
            # N·∫øu c√≥ l·ªói, self.full_data s·∫Ω v·∫´n l√† None, c√°c h√†m sau s·∫Ω x·ª≠ l√Ω
            
    def search(self, search_term: str, current_results: Optional[pd.DataFrame] = None) -> pd.DataFrame:
        """
        Th·ª±c hi·ªán t√¨m ki·∫øm tr√™n transcript.

        Args:
            search_term (str): T·ª´ kh√≥a t√¨m ki·∫øm.
            current_results (pd.DataFrame, optional): DataFrame k·∫øt qu·∫£ t·ª´ l·∫ßn
                t√¨m ki·∫øm tr∆∞·ªõc. N·∫øu l√† None, t√¨m ki·∫øm tr√™n to√†n b·ªô d·ªØ li·ªáu.

        Returns:
            pd.DataFrame: M·ªôt DataFrame m·ªõi ch·ª©a c√°c k·∫øt qu·∫£ ƒë√£ ƒë∆∞·ª£c l·ªçc.
        """
        if self.full_data is None:
            print("--- ‚ö†Ô∏è TranscriptSearcher ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o th√†nh c√¥ng. B·ªè qua t√¨m ki·∫øm. ---")
            return pd.DataFrame() # Tr·∫£ v·ªÅ DataFrame r·ªóng
        
        if not search_term or not search_term.strip():
            return current_results if current_results is not None else self.full_data

        # X√°c ƒë·ªãnh ngu·ªìn d·ªØ li·ªáu ƒë·ªÉ t√¨m ki·∫øm
        source_df = self.full_data if current_results is None else current_results
        
        # Th·ª±c hi·ªán t√¨m ki·∫øm kh√¥ng ph√¢n bi·ªát hoa th∆∞·ªùng v√† b·ªè qua c√°c gi√° tr·ªã NaN
        # `str.contains` l√† ph∆∞∆°ng th·ª©c c·ªët l√µi, c·ª±c k·ª≥ nhanh c·ªßa Pandas
        filtered_df = source_df[
            source_df['transcript_text'].str.contains(search_term, case=False, na=False)
        ].copy()
        
        return filtered_df